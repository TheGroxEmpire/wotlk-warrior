{"version":3,"file":"sim-9ce692c6.chunk.js","sources":["../../../ui/rogue/inputs.ts","../../../ui/rogue/presets.ts","../../../ui/rogue/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tRogue_Rotation_AssassinationPriority as AssassinationPriority,\n\tRogue_Rotation_CombatPriority as CombatPriority,\n\tRogue_Rotation_CombatBuilder as CombatBuilder,\n\tRogue_Rotation_SubtletyBuilder as SubtletyBuilder,\n\tRogue_Rotation_SubtletyPriority as SubtletyPriority,\n\tRogue_Rotation_Frequency as Frequency,\n\tRogue_Options_PoisonImbue as Poison,\n} from '../core/proto/rogue.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const MainHandImbue = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRogue, Poison>({\n\tfieldName: 'mhImbue',\n\tnumColumns: 1,\n\tvalues: [\n\t\t{ value: Poison.NoPoison, tooltip: 'No Main Hand Poison' },\n\t\t{ actionId: ActionId.fromItemId(43233), value: Poison.DeadlyPoison },\n\t\t{ actionId: ActionId.fromItemId(43231), value: Poison.InstantPoison },\n\t\t{ actionId: ActionId.fromItemId(43235), value: Poison.WoundPoison },\n\t],\n});\n\nexport const OffHandImbue = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRogue, Poison>({\n\tfieldName: 'ohImbue',\n\tnumColumns: 1,\n\tvalues: [\n\t\t{ value: Poison.NoPoison, tooltip: 'No Off Hand Poison' },\n\t\t{ actionId: ActionId.fromItemId(43233), value: Poison.DeadlyPoison },\n\t\t{ actionId: ActionId.fromItemId(43231), value: Poison.InstantPoison },\n\t\t{ actionId: ActionId.fromItemId(43235), value: Poison.WoundPoison },\n\t],\n});\n\nexport const StartingOverkillDuration = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecRogue>({\n\tfieldName: 'startingOverkillDuration',\n\tlabel: 'Starting Overkill duration',\n\tlabelTooltip: 'Initial Overkill buff duration at the start of each iteration.',\n\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().overkill || player.getTalents().masterOfSubtlety > 0\n});\n\nexport const VanishBreakTime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecRogue>({\n\tfieldName: 'vanishBreakTime',\n\tlabel: 'Vanish Break Time',\n\tlabelTooltip: 'Time it takes to start attacking after casting Vanish.',\n\textraCssClasses: ['experimental'],\n\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().overkill || player.getTalents().masterOfSubtlety > 0\n})\n\nexport const AssumeBleedActive = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecRogue>({\n\tfieldName: 'assumeBleedActive',\n\tlabel: 'Assume Bleed Always Active',\n\tlabelTooltip: 'Assume bleed always exists for \\'Hunger for Blood\\' activation. Otherwise will only calculate based on own garrote/rupture.',\n\textraCssClasses: ['within-raid-sim-hide'],\n\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().hungerForBlood\n})\n\nexport const HonorOfThievesCritRate = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecRogue>({\n\tfieldName: 'honorOfThievesCritRate',\n\tlabel: 'Honor of Thieves Crit Rate',\n\tlabelTooltip: 'Number of crits other group members generate within 100 seconds',\n\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().honorAmongThieves > 0\n});\n\nexport const ApplyPoisonsManually = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecRogue>({\n\tfieldName: 'applyPoisonsManually',\n\tlabel: 'Configure poisons manually',\n\tlabelTooltip: 'Prevent automatic poison configuration that is based on equipped weapons.',\n});\n\nexport const RogueRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'exposeArmorFrequency',\n\t\t\tlabel: 'Expose Armor',\n\t\t\tlabelTooltip: 'Frequency of Expose Armor casts.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Cast Once', value: Frequency.Once },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'minimumComboPointsExposeArmor',\n\t\t\tlabel: 'Minimum CP (Expose Armor)',\n\t\t\tlabelTooltip: 'Minimum number of combo points for Expose Armor when only cast once.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().exposeArmorFrequency == Frequency.Once,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'tricksOfTheTradeFrequency',\n\t\t\tlabel: 'Tricks of the Trade',\n\t\t\tlabelTooltip: 'Frequency of Tricks of the Trade usage.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, CombatBuilder>({\n\t\t\tfieldName: 'combatBuilder',\n\t\t\tlabel: \"Builder\",\n\t\t\tlabelTooltip: 'Use Sinister Strike, Backstab, or Hemorrhage as builder.',\n\t\t\tvalues: [\n\t\t\t\t{ name: \"Sinister Strike\", value: CombatBuilder.SinisterStrike },\n\t\t\t\t{ name: \"Backstab\", value: CombatBuilder.Backstab },\n\t\t\t\t{ name: \"Hemorrhage\", value: CombatBuilder.HemorrhageCombat },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().combatPotency > 0\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, CombatPriority>({\n\t\t\tfieldName: 'combatFinisherPriority',\n\t\t\tlabel: 'Finisher Priority',\n\t\t\tlabelTooltip: 'The finisher that will be cast with highest priority.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Rupture', value: CombatPriority.RuptureEviscerate },\n\t\t\t\t{ name: 'Eviscerate', value: CombatPriority.EviscerateRupture },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().combatPotency > 0\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, AssassinationPriority>({\n\t\t\tfieldName: 'assassinationFinisherPriority',\n\t\t\tlabel: 'Finisher Priority',\n\t\t\tlabelTooltip: 'The finisher that will be cast with highest priority.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Rupture', value: AssassinationPriority.RuptureEnvenom },\n\t\t\t\t{ name: 'Envenom', value: AssassinationPriority.EnvenomRupture },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().mutilate\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, SubtletyBuilder>({\n\t\t\tfieldName: 'subtletyBuilder',\n\t\t\tlabel: \"Builder\",\n\t\t\tlabelTooltip: 'Use Hemorrhage or Backstab as builder.',\n\t\t\tvalues: [\n\t\t\t\t{ name: \"Hemorrhage\", value: SubtletyBuilder.Hemorrhage },\n\t\t\t\t{ name: \"Backstab\", value: SubtletyBuilder.BackstabSub },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().honorAmongThieves > 0\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, SubtletyPriority>({\n\t\t\tfieldName: 'subtletyFinisherPriority',\n\t\t\tlabel: \"Finisher Priority\",\n\t\t\tlabelTooltip: 'The finisher that will be cast with highest priority.',\n\t\t\tvalues: [\n\t\t\t\t{ name: \"Eviscerate\", value: SubtletyPriority.SubtletyEviscerate },\n\t\t\t\t{ name: \"Envenom\", value: SubtletyPriority.SubtletyEnvenom },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().honorAmongThieves > 0\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecRogue, Frequency>({\n\t\t\tfieldName: 'multiTargetSliceFrequency',\n\t\t\tlabel: 'Multi-Target S&D',\n\t\t\tlabelTooltip: 'Frequency of Slice and Dice cast in multi-target scenarios.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: Frequency.Never },\n\t\t\t\t{ name: 'Once', value: Frequency.Once },\n\t\t\t\t{ name: 'Maintain', value: Frequency.Maintain },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().multiTargetSliceFrequency != Frequency.FrequencyUnknown\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'minimumComboPointsMultiTargetSlice',\n\t\t\tlabel: 'Minimum CP (Slice)',\n\t\t\tlabelTooltip: 'Minimum number of combo points spent if Slice and Dice has frequency: Once',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getRotation().multiTargetSliceFrequency == Frequency.Once\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'openWithGarrote',\n\t\t\tlabel: 'Open with Garrote',\n\t\t\tlabelTooltip: 'Open the encounter by casting Garrote.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'openWithShadowstep',\n\t\t\tlabel: 'Open with Shadowstep',\n\t\t\tlabelTooltip: 'Open the encounter by casting Shadowstep.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().shadowstep\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'openWithPremeditation',\n\t\t\tlabel: 'Open with Premeditation',\n\t\t\tlabelTooltip: 'Open the encounter by casting Premeditation.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().premeditation\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'useFeint',\n\t\t\tlabel: 'Use Feint',\n\t\t\tlabelTooltip: 'Cast Feint on cooldown. Mainly useful when using the associate glyph.'\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: \"useGhostlyStrike\",\n\t\t\tlabel: 'Use Ghostly Strike',\n\t\t\tlabelTooltip: 'Use Ghostly Strike on cooldown. Mainly useful when using the associate glyph.',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().ghostlyStrike\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecRogue>({\n\t\t\tfieldName: 'ruptureForBleed',\n\t\t\tlabel: 'Rupture for Bleed',\n\t\t\tlabelTooltip: 'Cast Rupture as needed to apply a bleed effect for Hunger for Blood',\n\t\t\tshowWhen: (player: Player<Spec.SpecRogue>) => player.getTalents().hungerForBlood\n\t\t}),\n\t],\n};\n","import {\n\tConjured,\n\tConsumes,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tRogue_Options as RogueOptions,\n\tRogue_Options_PoisonImbue as Poison,\n\tRogue_Rotation as RogueRotation,\n\tRogue_Rotation_AssassinationPriority,\n\tRogue_Rotation_CombatBuilder,\n\tRogue_Rotation_CombatPriority,\n\tRogue_Rotation_Frequency,\n\tRogue_Rotation_SubtletyBuilder,\n\tRogue_Rotation_SubtletyPriority,\n\tRogueMajorGlyph,\n} from '../core/proto/rogue.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport PreraidAssassinationGear from './gear_sets/preraid_assassination.gear.json';\nexport const PRERAID_PRESET_ASSASSINATION = PresetUtils.makePresetGear('PreRaid Assassination', PreraidAssassinationGear, { talentTree: 0 });\nimport P1AssassinationGear from './gear_sets/p1_assassination.gear.json';\nexport const P1_PRESET_ASSASSINATION = PresetUtils.makePresetGear('P1 Assassination', P1AssassinationGear, { talentTree: 0 });\nimport P2AssassinationGear from './gear_sets/p2_assassination.gear.json';\nexport const P2_PRESET_ASSASSINATION = PresetUtils.makePresetGear('P2 Assassination', P2AssassinationGear, { talentTree: 0 });\nimport P3AssassinationGear from './gear_sets/p3_assassination.gear.json';\nexport const P3_PRESET_ASSASSINATION = PresetUtils.makePresetGear('P3 Assassination', P3AssassinationGear, { talentTree: 0 });\nimport P4AssassinationGear from './gear_sets/p4_assassination.gear.json';\nexport const P4_PRESET_ASSASSINATION = PresetUtils.makePresetGear('P4 Assassination', P4AssassinationGear, { talentTree: 0 });\nimport P5AssassinationGear from './gear_sets/p5_assassination.gear.json';\nexport const P5_PRESET_ASSASSINATION = PresetUtils.makePresetGear('P5 Assassination', P5AssassinationGear, { talentTree: 0 });\nimport PreraidCombatGear from './gear_sets/preraid_combat.gear.json';\nexport const PRERAID_PRESET_COMBAT = PresetUtils.makePresetGear('PreRaid Combat', PreraidCombatGear, { talentTree: 1 });\nimport P1CombatGear from './gear_sets/p1_combat.gear.json';\nexport const P1_PRESET_COMBAT = PresetUtils.makePresetGear('P1 Combat', P1CombatGear, { talentTree: 1 });\nimport P2CombatGear from './gear_sets/p2_combat.gear.json';\nexport const P2_PRESET_COMBAT = PresetUtils.makePresetGear('P2 Combat', P2CombatGear, { talentTree: 1 });\nimport P3CombatGear from './gear_sets/p3_combat.gear.json';\nexport const P3_PRESET_COMBAT = PresetUtils.makePresetGear('P3 Combat', P3CombatGear, { talentTree: 1 });\nimport P4CombatGear from './gear_sets/p4_combat.gear.json';\nexport const P4_PRESET_COMBAT = PresetUtils.makePresetGear('P4 Combat', P4CombatGear, { talentTree: 1 });\nimport P5CombatGear from './gear_sets/p5_combat.gear.json';\nexport const P5_PRESET_COMBAT = PresetUtils.makePresetGear('P5 Combat', P5CombatGear, { talentTree: 1 });\nimport P1HemoSubGear from './gear_sets/p1_hemosub.gear.json';\nexport const P1_PRESET_HEMO_SUB = PresetUtils.makePresetGear('P1 Hemo Sub', P1HemoSubGear, { talentTree: 2 });\nimport P2HemoSubGear from './gear_sets/p2_hemosub.gear.json';\nexport const P2_PRESET_HEMO_SUB = PresetUtils.makePresetGear('P2 Hemo Sub', P2HemoSubGear, { talentTree: 2 });\nimport P3HemoSubGear from './gear_sets/p3_hemosub.gear.json';\nexport const P3_PRESET_HEMO_SUB = PresetUtils.makePresetGear('P3 Hemo Sub', P3HemoSubGear, { talentTree: 2 });\nimport P3DanceSubGear from './gear_sets/p3_dancesub.gear.json';\nexport const P3_PRESET_DANCE_SUB = PresetUtils.makePresetGear('P3 Dance Sub', P3DanceSubGear, { talentTree: 2 });\n\nexport const DefaultRotation = RogueRotation.create({\n\texposeArmorFrequency: Rogue_Rotation_Frequency.Never,\n\tminimumComboPointsExposeArmor: 2,\n\ttricksOfTheTradeFrequency: Rogue_Rotation_Frequency.Maintain,\n\tassassinationFinisherPriority: Rogue_Rotation_AssassinationPriority.EnvenomRupture,\n\tcombatBuilder: Rogue_Rotation_CombatBuilder.SinisterStrike,\n\tcombatFinisherPriority: Rogue_Rotation_CombatPriority.RuptureEviscerate,\n\tsubtletyBuilder: Rogue_Rotation_SubtletyBuilder.Hemorrhage,\n\tsubtletyFinisherPriority: Rogue_Rotation_SubtletyPriority.SubtletyEviscerate,\n\tminimumComboPointsPrimaryFinisher: 4,\n\tminimumComboPointsSecondaryFinisher: 4,\n});\n\nimport MutilateApl from './apls/mutilate.apl.json'\nexport const ROTATION_PRESET_MUTILATE = PresetUtils.makePresetAPLRotation('Mutilate', MutilateApl, { talentTree: 0 });\nimport MutilateExposeApl from './apls/mutilate_expose.apl.json'\nexport const ROTATION_PRESET_RUPTURE_MUTILATE = PresetUtils.makePresetAPLRotation('Rupture Mutilate', RuptureMutilateApl, { talentTree: 0 });\nimport RuptureMutilateApl from './apls/rupture_mutilate.apl.json'\nexport const ROTATION_PRESET_MUTILATE_EXPOSE = PresetUtils.makePresetAPLRotation('Mutilate w/ Expose', MutilateExposeApl, { talentTree: 0 });\nimport RuptureMutilateExposeApl from './apls/rupture_mutilate_expose.apl.json'\nexport const ROTATION_PRESET_RUPTURE_MUTILATE_EXPOSE = PresetUtils.makePresetAPLRotation('Rupture Mutilate w/ Expose', RuptureMutilateExposeApl, { talentTree: 0 });\nimport CombatApl from './apls/combat.apl.json'\nexport const ROTATION_PRESET_COMBAT = PresetUtils.makePresetAPLRotation('Combat', CombatApl, { talentTree: 1 });\nimport CombatExposeApl from './apls/combat_expose.apl.json'\nexport const ROTATION_PRESET_COMBAT_EXPOSE = PresetUtils.makePresetAPLRotation('Combat w/ Expose', CombatExposeApl, { talentTree: 1 });\nimport CombatCleaveSndApl from './apls/combat_cleave_snd.apl.json'\nexport const ROTATION_PRESET_COMBAT_CLEAVE_SND = PresetUtils.makePresetAPLRotation('Combat Cleave SND', CombatCleaveSndApl, { talentTree: 1 });\nimport CombatCleaveSndExposeApl from './apls/combat_cleave_snd_expose.apl.json'\nexport const ROTATION_PRESET_COMBAT_CLEAVE_SND_EXPOSE = PresetUtils.makePresetAPLRotation('Combat Cleave SND w/ Expose', CombatCleaveSndExposeApl, { talentTree: 1 });\nimport FanAoeApl from './apls/fan_aoe.apl.json'\nexport const ROTATION_PRESET_AOE = PresetUtils.makePresetAPLRotation('Fan AOE', FanAoeApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const CombatHackTalents = {\n\tname: 'Combat Axes/Swords',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '00532010414-0252051000035015223100501251',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfKillingSpree,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfRupture,\n\t\t})\n\t}),\n};\n\nexport const CombatCQCTalents = {\n\tname: 'Combat Fists',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '00532010414-0252051050035010223100501251',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfKillingSpree,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfRupture,\n\t\t})\n\t}),\n};\n\nexport const AssassinationTalents137 = {\n\tname: 'Assassination 13/7',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '005303104352100520103331051-005005003-502',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfMutilate,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfHungerForBlood,\n\t\t})\n\t}),\n};\n\nexport const AssassinationTalents182 = {\n\tname: 'Assassination 18/2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '005303104352100520103331051-005005005003-2',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfMutilate,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfHungerForBlood,\n\t\t})\n\t}),\n};\n\nexport const AssassinationTalentsBF = {\n\tname: 'Assassination Blade Flurry',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '005303104352100520103231-005205005003001-501',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfMutilate,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfBladeFlurry,\n\t\t})\n\t}),\n};\n\nexport const SubtletyTalents = {\n\tname: 'Subtlety',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '30532010114--5022012030321121350115031151',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfEviscerate,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfRupture,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t})\n\t}),\n}\n\nexport const HemoSubtletyTalents = {\n\tname: 'Hemo Sub',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '30532010135--502201203032112135011503122',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: RogueMajorGlyph.GlyphOfEviscerate,\n\t\t\tmajor2: RogueMajorGlyph.GlyphOfRupture,\n\t\t\tmajor3: RogueMajorGlyph.GlyphOfTricksOfTheTrade,\n\t\t})\n\t}),\n}\n\nexport const DefaultOptions = RogueOptions.create({\n\tmhImbue: Poison.DeadlyPoison,\n\tohImbue: Poison.InstantPoison,\n\tapplyPoisonsManually: false,\n\tstartingOverkillDuration: 20,\n\tvanishBreakTime: 0.1,\n\thonorOfThievesCritRate: 400,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tprepopPotion: Potions.PotionOfSpeed,\n\tdefaultConjured: Conjured.ConjuredRogueThistleTea,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodMegaMammothMeal,\n});\n","import {\n\tClass, \n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat,\n\tTristateEffect,\n\tWeaponType\n} from '../core/proto/common.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport {\n\tRogue_Options_PoisonImbue,\n\tRogue_Rotation_AssassinationPriority as AssassinationPriority,\n\tRogue_Rotation_CombatBuilder as CombatBuilder,\n\tRogue_Rotation_CombatPriority as CombatPriority,\n\tRogue_Rotation_Frequency as Frequency,\n\tRogue_Rotation_SubtletyPriority as SubtletyPriority,\n\tRogueMajorGlyph,\n} from '../core/proto/rogue.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\n\nimport * as RogueInputs from './inputs.js';\nimport * as Presets from './presets.js';\nimport { DefaultOptions } from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecRogue, {\n\tcssClass: 'rogue-sim-ui',\n\tcssScheme: 'rogue',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t\t'Rotations are not fully optimized, especially for non-standard setups.',\n\t],\n\twarnings: [\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.sim.encounter.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tlet hasNoArmor = false\n\t\t\t\t\tfor (const target of simUI.sim.encounter.targets) {\n\t\t\t\t\t\tif (new Stats(target.stats).getStat(Stat.StatArmor) <= 0) {\n\t\t\t\t\t\t\thasNoArmor = true\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (hasNoArmor) {\n\t\t\t\t\t\treturn 'One or more targets have no armor. Check advanced encounter settings.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tsimUI.player.getTalents().mutilate &&\n\t\t\t\t\t\t(simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType != WeaponType.WeaponTypeDagger ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType != WeaponType.WeaponTypeDagger)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn '\"Mutilate\" talent selected, but daggers not equipped in both hands.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getRotation().combatBuilder == CombatBuilder.Backstab &&\n\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType != WeaponType.WeaponTypeDagger) {\n\t\t\t\t\t\treturn 'Builder \"Backstab\" selected, but no dagger equipped.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getTalents().hackAndSlash) {\n\t\t\t\t\t\tif (simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeSword ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeAxe ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeSword ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeAxe) {\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn '\"Hack and Slash\" talent selected, but swords or axes not equipped.';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getTalents().closeQuartersCombat) {\n\t\t\t\t\t\tif (simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeFist ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeDagger ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeFist ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeDagger) {\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn '\"Close Quarters Combat\" talent selected, but fists or daggers not equipped.';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getTalents().maceSpecialization) {\n\t\t\t\t\t\tif (simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeMace ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeMace) {\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn '\"Mace Specialization\" talent selected, but maces not equipped.';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getInFrontOfTarget() && (simUI.player.getRotation().combatBuilder == CombatBuilder.Backstab ||\n\t\t\t\t\t\tsimUI.player.getRotation().openWithGarrote)) {\n\t\t\t\t\t\treturn 'Option \"In Front of Target\" selected, but using Backstab or Garrote as builder or opener.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getRotation().combatBuilder == CombatBuilder.HemorrhageCombat && !simUI.player.getTalents().hemorrhage) {\n\t\t\t\t\t\treturn 'Builder \"Hemorrhage\" selected, but Hemorrhage is not talented.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getRotation().useGhostlyStrike && !simUI.player.getMajorGlyphs().includes(RogueMajorGlyph.GlyphOfGhostlyStrike)) {\n\t\t\t\t\t\treturn '\"Use Ghostly Strike\" selected, but missing Glyph of Ghostly Strike.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getRotation().useFeint && !simUI.player.getMajorGlyphs().includes(RogueMajorGlyph.GlyphOfFeint)) {\n\t\t\t\t\t\treturn '\"Use Feint\" selected, but missing Glyph of Feint.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getRotation().exposeArmorFrequency == 2 && !simUI.player.getMajorGlyphs().includes(RogueMajorGlyph.GlyphOfExposeArmor) && simUI.player.getTalentTree() == 1) {\n\t\t\t\t\t\treturn '\"Maintain Expose Armor\" selected, but missing Glyph of Expose Armor.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tconst mhWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\t\tconst ohWeaponSpeed = simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\t\tconst mhImbue = simUI.player.getSpecOptions().mhImbue;\n\t\t\t\t\tconst ohImbue = simUI.player.getSpecOptions().ohImbue;\n\t\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined' || !simUI.player.getSpecOptions().applyPoisonsManually) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\tif (mhWeaponSpeed < ohWeaponSpeed && ohImbue == Rogue_Options_PoisonImbue.DeadlyPoison) {\n\t\t\t\t\t\treturn 'Deadly poison applied to slower (off hand) weapon.';\n\t\t\t\t\t}\n\t\t\t\t\tif (ohWeaponSpeed < mhWeaponSpeed && mhImbue == Rogue_Options_PoisonImbue.DeadlyPoison) {\n\t\t\t\t\t\treturn 'Deadly poison applied to slower (main hand) weapon.';\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.PRERAID_PRESET_ASSASSINATION.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatAgility]: 1.86,\n\t\t\t[Stat.StatStrength]: 1.14,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatSpellCrit]: 0.28,\n\t\t\t[Stat.StatSpellHit]: 0.08,\n\t\t\t[Stat.StatMeleeHit]: 1.39,\n\t\t\t[Stat.StatMeleeCrit]: 1.32,\n\t\t\t[Stat.StatMeleeHaste]: 1.48,\n\t\t\t[Stat.StatArmorPenetration]: 0.84,\n\t\t\t[Stat.StatExpertise]: 0.98,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 2.94,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.45,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\trotation: Presets.DefaultRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.AssassinationTalents137.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tbloodlust: true,\n\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\ticyTalons: true,\n\t\t\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\t\t\tabominationsMight: true,\n\t\t\tswiftRetribution: true,\n\t\t\telementalOath: true,\n\t\t\tsanctifiedRetribution: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\theartOfTheCrusader: true,\n\t\t\tmangle: true,\n\t\t\tsunderArmor: true,\n\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\tshadowMastery: true,\n\t\t\tearthAndMoon: true,\n\t\t\tbloodFrenzy: true,\n\t\t}),\n\t},\n\n\tplayerInputs: {\n\t\tinputs: [\n\t\t\tRogueInputs.ApplyPoisonsManually\n\t\t]\n\t},\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tRogueInputs.MainHandImbue,\n\t\tRogueInputs.OffHandImbue,\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: RogueInputs.RogueRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tIconInputs.SpellCritBuff,\n\t\tIconInputs.SpellCritDebuff,\n\t\tIconInputs.SpellHitDebuff,\n\t\tIconInputs.SpellDamageDebuff\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tRogueInputs.StartingOverkillDuration,\n\t\t\tRogueInputs.VanishBreakTime,\n\t\t\tRogueInputs.AssumeBleedActive,\n\t\t\tRogueInputs.HonorOfThievesCritRate,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.AssassinationTalents137,\n\t\t\tPresets.AssassinationTalents182,\n\t\t\tPresets.AssassinationTalentsBF,\n\t\t\tPresets.CombatHackTalents,\n\t\t\tPresets.CombatCQCTalents,\n\t\t\tPresets.SubtletyTalents,\n\t\t\tPresets.HemoSubtletyTalents,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.ROTATION_PRESET_MUTILATE,\n\t\t\tPresets.ROTATION_PRESET_MUTILATE_EXPOSE,\n\t\t\tPresets.ROTATION_PRESET_RUPTURE_MUTILATE,\n\t\t\tPresets.ROTATION_PRESET_RUPTURE_MUTILATE_EXPOSE,\n\t\t\tPresets.ROTATION_PRESET_COMBAT,\n\t\t\tPresets.ROTATION_PRESET_COMBAT_EXPOSE,\n\t\t\tPresets.ROTATION_PRESET_COMBAT_CLEAVE_SND,\n\t\t\tPresets.ROTATION_PRESET_COMBAT_CLEAVE_SND_EXPOSE,\n\t\t\tPresets.ROTATION_PRESET_AOE,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_PRESET_ASSASSINATION,\n\t\t\tPresets.PRERAID_PRESET_COMBAT,\n\t\t\tPresets.P1_PRESET_ASSASSINATION,\n\t\t\tPresets.P1_PRESET_COMBAT,\n\t\t\tPresets.P1_PRESET_HEMO_SUB,\n\t\t\tPresets.P2_PRESET_ASSASSINATION,\n\t\t\tPresets.P2_PRESET_COMBAT,\n\t\t\tPresets.P3_PRESET_ASSASSINATION,\n\t\t\tPresets.P3_PRESET_COMBAT,\n\t\t\tPresets.P4_PRESET_ASSASSINATION,\n\t\t\tPresets.P4_PRESET_COMBAT,\n\t\t\tPresets.P5_PRESET_ASSASSINATION,\n\t\t\tPresets.P5_PRESET_COMBAT,\n\t\t\tPresets.P2_PRESET_HEMO_SUB,\n\t\t\tPresets.P3_PRESET_HEMO_SUB,\n\t\t\tPresets.P3_PRESET_DANCE_SUB,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecRogue>): APLRotation => {\n\t\tconst talentTree = player.getTalentTree();\n\t\tconst numTargets = player.sim.encounter.targets.length;\n\t\tif (numTargets >= 5) {\n\t\t\treturn Presets.ROTATION_PRESET_AOE.rotation.rotation!;\n\t\t} else if (talentTree == 0) {\n\t\t\treturn Presets.ROTATION_PRESET_MUTILATE_EXPOSE.rotation.rotation!;\n\t\t} else if (talentTree == 1) {\n\t\t\treturn Presets.ROTATION_PRESET_COMBAT_EXPOSE.rotation.rotation!;\n\t\t} else {\n\t\t\t// TODO: Need a sub rotation here\n\t\t\treturn Presets.ROTATION_PRESET_MUTILATE_EXPOSE.rotation.rotation!;\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecRogue,\n\t\t\ttooltip: 'Assassination Rogue',\n\t\t\tdefaultName: 'Assassination',\n\t\t\ticonUrl: getSpecIcon(Class.ClassRogue, 0),\n\n\t\t\ttalents: Presets.AssassinationTalents137.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET_ASSASSINATION.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_ASSASSINATION.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_ASSASSINATION.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_ASSASSINATION.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET_ASSASSINATION.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_ASSASSINATION.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_ASSASSINATION.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_ASSASSINATION.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecRogue,\n\t\t\ttooltip: 'Combat Rogue',\n\t\t\tdefaultName: 'Combat',\n\t\t\ticonUrl: getSpecIcon(Class.ClassRogue, 1),\n\n\t\t\ttalents: Presets.CombatCQCTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET_COMBAT.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_COMBAT.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_COMBAT.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_COMBAT.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET_COMBAT.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_COMBAT.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_COMBAT.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_COMBAT.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class RogueSimUI extends IndividualSimUI<Spec.SpecRogue> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRogue>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t\tthis.player.changeEmitter.on((c) => {\n\t\t\tconst rotation = this.player.getRotation()\n\t\t\tconst options = this.player.getSpecOptions()\n\t\t\tconst encounter = this.sim.encounter\n\t\t\tif (this.player.getTalentTree() == 0) {\n\t\t\t\tif (rotation.assassinationFinisherPriority == AssassinationPriority.AssassinationPriorityUnknown) {\n\t\t\t\t\trotation.assassinationFinisherPriority = Presets.DefaultRotation.assassinationFinisherPriority;\n\t\t\t\t}\n\t\t\t\trotation.combatFinisherPriority = CombatPriority.CombatPriorityUnknown;\n\t\t\t\trotation.combatBuilder = CombatBuilder.SinisterStrike;\n\t\t\t\trotation.subtletyFinisherPriority = SubtletyPriority.SubtletyPriorityUnknown;\n\t\t\t\toptions.honorOfThievesCritRate = -1;\n\t\t\t} else if (this.player.getTalentTree() == 1) {\n\t\t\t\tif (rotation.combatFinisherPriority == CombatPriority.CombatPriorityUnknown) {\n\t\t\t\t\trotation.combatFinisherPriority = Presets.DefaultRotation.combatFinisherPriority;\n\t\t\t\t\trotation.combatBuilder = Presets.DefaultRotation.combatBuilder;\n\t\t\t\t}\n\t\t\t\trotation.assassinationFinisherPriority = AssassinationPriority.AssassinationPriorityUnknown;\n\t\t\t\trotation.subtletyFinisherPriority = SubtletyPriority.SubtletyPriorityUnknown;\n\t\t\t\toptions.honorOfThievesCritRate = -1;\n\t\t\t} else {\n\t\t\t\tif (rotation.subtletyFinisherPriority == SubtletyPriority.SubtletyPriorityUnknown) {\n\t\t\t\t\trotation.subtletyFinisherPriority = Presets.DefaultRotation.subtletyFinisherPriority;\n\t\t\t\t}\n\t\t\t\trotation.assassinationFinisherPriority = AssassinationPriority.AssassinationPriorityUnknown;\n\t\t\t\trotation.combatFinisherPriority = CombatPriority.CombatPriorityUnknown;\n\t\t\t\trotation.combatBuilder = CombatBuilder.SinisterStrike;\n\t\t\t\tif (options.honorOfThievesCritRate == -1) {\n\t\t\t\t\toptions.honorOfThievesCritRate = DefaultOptions.honorOfThievesCritRate\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setRotation(c, rotation)\n\t\t\tif (!options.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (encounter.targets.length > 3) {\n\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options)\n\t\t});\n\t\tthis.sim.encounter.changeEmitter.on((c) => {\n\t\t\tconst rotation = this.player.getRotation()\n\t\t\tconst options = this.player.getSpecOptions()\n\t\t\tconst encounter = this.sim.encounter\n\t\t\tif (this.sim.encounter.targets.length >= 3) {\n\t\t\t\tif (rotation.multiTargetSliceFrequency == Frequency.FrequencyUnknown) {\n\t\t\t\t\trotation.multiTargetSliceFrequency = Presets.DefaultRotation.multiTargetSliceFrequency;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trotation.multiTargetSliceFrequency = Frequency.FrequencyUnknown;\n\t\t\t}\n\t\t\tthis.player.setRotation(c, rotation)\n\t\t\tif (!options.applyPoisonsManually) {\n\t\t\t\tconst mhWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponSpeed;\n\t\t\t\tconst ohWeaponSpeed = this.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponSpeed;\n\t\t\t\tif (typeof mhWeaponSpeed == 'undefined' || typeof ohWeaponSpeed == 'undefined') {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (encounter.targets.length > 3) {\n\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t} else {\n\t\t\t\t\tif (mhWeaponSpeed <= ohWeaponSpeed) {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t} else {\n\t\t\t\t\t\toptions.mhImbue = Rogue_Options_PoisonImbue.InstantPoison\n\t\t\t\t\t\toptions.ohImbue = Rogue_Options_PoisonImbue.DeadlyPoison\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.player.setSpecOptions(c, options)\n\t\t});\n\t}\n}\n"],"names":["MainHandImbue","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","numColumns","values","value","Poison","NoPoison","tooltip","actionId","ActionId","fromItemId","DeadlyPoison","InstantPoison","WoundPoison","OffHandImbue","StartingOverkillDuration","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","showWhen","player","getTalents","overkill","masterOfSubtlety","VanishBreakTime","extraCssClasses","AssumeBleedActive","InputHelpers.makeSpecOptionsBooleanInput","hungerForBlood","HonorOfThievesCritRate","honorAmongThieves","ApplyPoisonsManually","RogueRotationConfig","inputs","InputHelpers.makeRotationEnumInput","name","Frequency","Never","Once","Maintain","InputHelpers.makeRotationNumberInput","getRotation","exposeArmorFrequency","CombatBuilder","SinisterStrike","Backstab","HemorrhageCombat","combatPotency","CombatPriority","RuptureEviscerate","EviscerateRupture","AssassinationPriority","RuptureEnvenom","EnvenomRupture","mutilate","SubtletyBuilder","Hemorrhage","BackstabSub","SubtletyPriority","SubtletyEviscerate","SubtletyEnvenom","multiTargetSliceFrequency","FrequencyUnknown","InputHelpers.makeRotationBooleanInput","shadowstep","premeditation","ghostlyStrike","PRERAID_PRESET_ASSASSINATION","PresetUtils.makePresetGear","talentTree","P1_PRESET_ASSASSINATION","P1AssassinationGear","P2_PRESET_ASSASSINATION","P2AssassinationGear","P3_PRESET_ASSASSINATION","P3AssassinationGear","P4_PRESET_ASSASSINATION","P4AssassinationGear","P5_PRESET_ASSASSINATION","P5AssassinationGear","PRERAID_PRESET_COMBAT","PreraidCombatGear","P1_PRESET_COMBAT","P1CombatGear","P2_PRESET_COMBAT","P2CombatGear","P3_PRESET_COMBAT","P3CombatGear","P4_PRESET_COMBAT","P4CombatGear","P5_PRESET_COMBAT","P5CombatGear","P1_PRESET_HEMO_SUB","P1HemoSubGear","P2_PRESET_HEMO_SUB","P2HemoSubGear","P3_PRESET_HEMO_SUB","P3HemoSubGear","P3_PRESET_DANCE_SUB","P3DanceSubGear","DefaultRotation","RogueRotation","create","Rogue_Rotation_Frequency","minimumComboPointsExposeArmor","tricksOfTheTradeFrequency","assassinationFinisherPriority","Rogue_Rotation_AssassinationPriority","combatBuilder","Rogue_Rotation_CombatBuilder","combatFinisherPriority","Rogue_Rotation_CombatPriority","subtletyBuilder","Rogue_Rotation_SubtletyBuilder","subtletyFinisherPriority","Rogue_Rotation_SubtletyPriority","minimumComboPointsPrimaryFinisher","minimumComboPointsSecondaryFinisher","ROTATION_PRESET_MUTILATE","PresetUtils.makePresetAPLRotation","MutilateApl","ROTATION_PRESET_RUPTURE_MUTILATE","RuptureMutilateApl","ROTATION_PRESET_MUTILATE_EXPOSE","MutilateExposeApl","ROTATION_PRESET_RUPTURE_MUTILATE_EXPOSE","RuptureMutilateExposeApl","ROTATION_PRESET_COMBAT","CombatApl","ROTATION_PRESET_COMBAT_EXPOSE","CombatExposeApl","ROTATION_PRESET_COMBAT_CLEAVE_SND","CombatCleaveSndApl","ROTATION_PRESET_COMBAT_CLEAVE_SND_EXPOSE","CombatCleaveSndExposeApl","ROTATION_PRESET_AOE","FanAoeApl","CombatHackTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","RogueMajorGlyph","GlyphOfKillingSpree","major2","GlyphOfTricksOfTheTrade","major3","GlyphOfRupture","CombatCQCTalents","AssassinationTalents137","GlyphOfMutilate","GlyphOfHungerForBlood","AssassinationTalents182","AssassinationTalentsBF","GlyphOfBladeFlurry","SubtletyTalents","GlyphOfEviscerate","HemoSubtletyTalents","DefaultOptions","RogueOptions","mhImbue","ohImbue","applyPoisonsManually","startingOverkillDuration","vanishBreakTime","honorOfThievesCritRate","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","prepopPotion","defaultConjured","Conjured","ConjuredRogueThistleTea","flask","Flask","FlaskOfEndlessRage","food","Food","FoodMegaMammothMeal","SPEC_CONFIG","registerSpecConfig","Spec","SpecRogue","cssClass","cssScheme","knownIssues","warnings","simUI","updateOn","sim","encounter","changeEmitter","getContent","hasNoArmor","target","targets","Stats","stats","getStat","Stat","StatArmor","getGear","getEquippedItem","ItemSlot","ItemSlotMainHand","item","weaponType","WeaponType","WeaponTypeDagger","ItemSlotOffHand","hackAndSlash","WeaponTypeSword","WeaponTypeAxe","closeQuartersCombat","WeaponTypeFist","maceSpecialization","WeaponTypeMace","getInFrontOfTarget","openWithGarrote","hemorrhage","useGhostlyStrike","getMajorGlyphs","includes","GlyphOfGhostlyStrike","useFeint","GlyphOfFeint","GlyphOfExposeArmor","getTalentTree","mhWeaponSpeed","weaponSpeed","ohWeaponSpeed","getSpecOptions","Rogue_Options_PoisonImbue","epStats","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatSpellHit","StatSpellCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.PRERAID_PRESET_ASSASSINATION","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.AssassinationTalents137","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","bloodlust","strengthOfEarthTotem","icyTalons","leaderOfThePack","abominationsMight","swiftRetribution","elementalOath","sanctifiedRetribution","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","heartOfTheCrusader","mangle","sunderArmor","faerieFire","shadowMastery","earthAndMoon","bloodFrenzy","playerInputs","RogueInputs.ApplyPoisonsManually","playerIconInputs","RogueInputs.MainHandImbue","RogueInputs.OffHandImbue","rotationInputs","RogueInputs.RogueRotationConfig","includeBuffDebuffInputs","IconInputs.SpellCritBuff","IconInputs.SpellCritDebuff","IconInputs.SpellHitDebuff","IconInputs.SpellDamageDebuff","excludeBuffDebuffInputs","otherInputs","RogueInputs.StartingOverkillDuration","RogueInputs.VanishBreakTime","RogueInputs.AssumeBleedActive","RogueInputs.HonorOfThievesCritRate","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.AssassinationTalents182","Presets.AssassinationTalentsBF","Presets.CombatHackTalents","Presets.CombatCQCTalents","Presets.SubtletyTalents","Presets.HemoSubtletyTalents","rotations","Presets.ROTATION_PRESET_MUTILATE","Presets.ROTATION_PRESET_MUTILATE_EXPOSE","Presets.ROTATION_PRESET_RUPTURE_MUTILATE","Presets.ROTATION_PRESET_RUPTURE_MUTILATE_EXPOSE","Presets.ROTATION_PRESET_COMBAT","Presets.ROTATION_PRESET_COMBAT_EXPOSE","Presets.ROTATION_PRESET_COMBAT_CLEAVE_SND","Presets.ROTATION_PRESET_COMBAT_CLEAVE_SND_EXPOSE","Presets.ROTATION_PRESET_AOE","Presets.PRERAID_PRESET_COMBAT","Presets.P1_PRESET_ASSASSINATION","Presets.P1_PRESET_COMBAT","Presets.P1_PRESET_HEMO_SUB","Presets.P2_PRESET_ASSASSINATION","Presets.P2_PRESET_COMBAT","Presets.P3_PRESET_ASSASSINATION","Presets.P3_PRESET_COMBAT","Presets.P4_PRESET_ASSASSINATION","Presets.P4_PRESET_COMBAT","Presets.P5_PRESET_ASSASSINATION","Presets.P5_PRESET_COMBAT","Presets.P2_PRESET_HEMO_SUB","Presets.P3_PRESET_HEMO_SUB","Presets.P3_PRESET_DANCE_SUB","autoRotation","length","raidSimPresets","spec","defaultName","iconUrl","getSpecIcon","Class","ClassRogue","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceOrc","defaultGear","RogueSimUI","IndividualSimUI","constructor","parentElem","super","this","on","c","options","AssassinationPriorityUnknown","CombatPriorityUnknown","SubtletyPriorityUnknown","setRotation","setSpecOptions"],"mappings":"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"}