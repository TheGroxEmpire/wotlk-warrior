{"version":3,"file":"sim-56d4031c.chunk.js","sources":["../../../ui/warrior/inputs.ts","../../../ui/warrior/presets.ts","../../../ui/warrior/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport {\n\tWarriorShout,\n\tWarriorTalents as WarriorTalents,\n\tWarrior,\n\tWarrior_Rotation as WarriorRotation,\n\tWarrior_Rotation_SunderArmor as SunderArmor,\n\tWarrior_Options as WarriorOptions,\n\tWarrior_Rotation_StanceOption as StanceOption,\n\tWarrior_Rotation_SpellOption as SpellOption,\n\tWarrior_Rotation_MainGcd as MainGcd,\n} from '../core/proto/warrior.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const Recklessness = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'useRecklessness',\n\tid: ActionId.fromSpellId(1719),\n});\n\nexport const ShatteringThrow = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecWarrior>({\n\tfieldName: 'useShatteringThrow',\n\tid: ActionId.fromSpellId(64382),\n});\n\nexport const StartingRage = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecWarrior>({\n\tfieldName: 'startingRage',\n\tlabel: 'Starting Rage',\n\tlabelTooltip: 'Initial rage at the start of each iteration.',\n});\n\n\nexport const StanceSnapshot = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\n\tfieldName: 'stanceSnapshot',\n\tlabel: 'Stance Snapshot',\n\tlabelTooltip: 'Ability that is cast at the same time as stance swap will benefit from the bonus of the stance before the swap.',\n});\n\n// Allows for auto gemming whilst ignoring expertise cap\n// (Useful for Arms)\nexport const DisableExpertiseGemming = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecWarrior>({\n\tfieldName: 'disableExpertiseGemming',\n\tlabel: 'Disable expertise gemming',\n\tlabelTooltip: 'Disables auto gemming for expertise',\n});\n\nexport const ShoutPicker = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecWarrior, WarriorShout>({\n\tfieldName: 'shout',\n\tvalues: [\n\t\t{ color: 'c79c6e', value: WarriorShout.WarriorShoutNone },\n\t\t{ actionId: ActionId.fromSpellId(2048), value: WarriorShout.WarriorShoutBattle },\n\t\t{ actionId: ActionId.fromSpellId(469), value: WarriorShout.WarriorShoutCommanding },\n\t],\n});\n\nexport const WarriorRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useMs',\n\t\t\tlabel: 'Use Mortal Strike',\n\t\t\tlabelTooltip: 'Use Mortal Strike when rage threshold is met.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0 && !player.getRotation().customRotationOption,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useCleave',\n\t\t\tlabel: 'Use Cleave',\n\t\t\tlabelTooltip: 'Use Cleave instead of Heroic Strike.',\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => !player.getRotation().customRotationOption,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useRend',\n\t\t\tlabel: 'Use Rend',\n\t\t\tlabelTooltip: 'Use Rend when rage threshold is met and the debuff duration is less than refresh time.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => !player.getRotation().customRotationOption,\n\t\t}),\n\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useOverpower',\n\t\t\tlabel: 'Use Overpower',\n\t\t\tlabelTooltip: 'Use Overpower whenever it is available on an open GCD.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1 && !player.getRotation().customRotationOption,\n\t\t}),\n\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, MainGcd>({\n\t\t\tfieldName: 'mainGcd',\n\t\t\tlabel: 'Main GCD',\n\t\t\tlabelTooltip: 'Main GCD ability that will be prioritized above other abilities.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Slam', value: MainGcd.Slam },\n\t\t\t\t{ name: 'Bloodthirst', value: MainGcd.Bloodthirst },\n\t\t\t\t{ name: 'Whirlwind', value: MainGcd.Whirlwind },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1 && !player.getRotation().customRotationOption,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'msRageThreshold',\n\t\t\tlabel: 'Mortal Strike rage threshold',\n\t\t\tlabelTooltip: 'Mortal Strike when rage is above:',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useMs || player.getRotation().customRotationOption) && player.getTalentTree() == 0,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'slamRageThreshold',\n\t\t\tlabel: 'Slam rage threshold',\n\t\t\tlabelTooltip: 'Slam when rage is above:',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useMs || player.getRotation().customRotationOption) && player.getTalentTree() == 0,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'bloodsurgeDurationThreshold',\n\t\t\tlabel: 'Exp Slam: Bloodsurge duration threshold (s)',\n\t\t\tlabelTooltip: 'Cast Exp Slam when Bloodsurge duration is below (seconds):',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().customRotationOption && player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'hsRageThreshold',\n\t\t\tlabel: 'HS rage threshold',\n\t\t\tlabelTooltip: 'Heroic Strike when rage is above:',\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendHealthThresholdAbove',\n\t\t\tlabel: 'Rend health threshold (%)',\n\t\t\tlabelTooltip: 'Rend will only be used when boss health is above this value in %.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useRend == true || player.getRotation().customRotationOption),\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendRageThresholdBelow',\n\t\t\tlabel: 'Rend rage threshold below',\n\t\t\tlabelTooltip: 'Rend will only be used when rage is smaller than this value.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useRend == true || player.getRotation().customRotationOption) && player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'rendCdThreshold',\n\t\t\tlabel: 'Rend Refresh Time (s)',\n\t\t\tlabelTooltip: 'Refresh Rend when the remaining duration is less than this amount of time (seconds).',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().useRend == true || player.getRotation().customRotationOption,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useHsDuringExecute',\n\t\t\tlabel: 'HS during Execute Phase',\n\t\t\tlabelTooltip: 'Use Heroic Strike during Execute Phase.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useBtDuringExecute',\n\t\t\tlabel: 'BT during Execute Phase',\n\t\t\tlabelTooltip: 'Use Bloodthirst during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useWwDuringExecute',\n\t\t\tlabel: 'WW during Execute Phase',\n\t\t\tlabelTooltip: 'Use Whirlwind during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'useSlamOverExecute',\n\t\t\tlabel: 'Slam during Execute Phase',\n\t\t\tlabelTooltip: 'Use Slam Over Execute when Bloodsurge Procs in Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'executePhaseOverpower',\n\t\t\tlabel: 'Overpower in Execute Phase',\n\t\t\tlabelTooltip: 'Use Overpower instead of Execute whenever it is available.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => (player.getRotation().useOverpower == true || player.getRotation().customRotationOption) && player.getTalentTree() == 1,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'spamExecute',\n\t\t\tlabel: 'Spam Execute',\n\t\t\tlabelTooltip: 'Use Execute whenever possible during Execute Phase.',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 0,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, SunderArmor>({\n\t\t\tfieldName: 'sunderArmor',\n\t\t\tlabel: 'Sunder Armor',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Never', value: SunderArmor.SunderArmorNone },\n\t\t\t\t{ name: 'Help Stack', value: SunderArmor.SunderArmorHelpStack },\n\t\t\t\t{ name: 'Maintain Debuff', value: SunderArmor.SunderArmorMaintain },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecWarrior, StanceOption>({\n\t\t\tfieldName: 'stanceOption',\n\t\t\tlabel: 'Stance Option',\n\t\t\tlabelTooltip: 'Stance to stay on. The default for Fury (Bloodthirst) is Berserker Stance and Battle Stance for everything else.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Default', value: StanceOption.DefaultStance },\n\t\t\t\t{ name: 'Battle Stance', value: StanceOption.BattleStance },\n\t\t\t\t{ name: 'Berserker Stance', value: StanceOption.BerserkerStance },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'maintainDemoShout',\n\t\t\tlabel: 'Maintain Demo Shout',\n\t\t\tlabelTooltip: 'Keep Demo Shout active on the primary target.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'maintainThunderClap',\n\t\t\tlabel: 'Maintain Thunder Clap',\n\t\t\tlabelTooltip: 'Keep Thunder Clap active on the primary target.',\n\t\t}),\n\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecWarrior>({\n\t\t\tfieldName: 'customRotationOption',\n\t\t\tlabel: 'Custom Rotation (Advanced)',\n\t\t\tlabelTooltip: 'Create your own rotation action priority list.',\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.sim.getShowExperimental(),\n\t\t\tchangeEmitter: (player: Player<Spec.SpecWarrior>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\n\t\tInputHelpers.makeCustomRotationInput<Spec.SpecWarrior, SpellOption>({\n\t\t\tfieldName: 'customRotation',\n\t\t\tnumColumns: 3,\n\t\t\tshowWhen: (player: Player<Spec.SpecWarrior>) => player.getRotation().customRotationOption && player.sim.getShowExperimental(),\n\t\t\tvalues: [\n\t\t\t\t{ actionId: ActionId.fromSpellId(23881), value: SpellOption.BloodthirstCustom },\n\t\t\t\t{ actionId: ActionId.fromSpellId(1680), value: SpellOption.WhirlwindCustom },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47475), value: SpellOption.SlamCustom },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47475), value: SpellOption.SlamExpiring, text: \"Exp\", showWhen: (player: Player<Spec.SpecWarrior>) => player.getTalentTree() == 1, },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47486), value: SpellOption.MortalStrike },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47465), value: SpellOption.Rend },\n\t\t\t\t{ actionId: ActionId.fromSpellId(7384), value: SpellOption.Overpower },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47471), value: SpellOption.Execute },\n\t\t\t\t{ actionId: ActionId.fromSpellId(47502), value: SpellOption.ThunderClap },\n\t\t\t],\n\t\t}),\n\t],\n};\n","import {\n\tConsumes,\n\tFaction,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tWarriorShout,\n\tWarrior_Rotation as WarriorRotation,\n\tWarrior_Rotation_SunderArmor as SunderArmor,\n\tWarrior_Options as WarriorOptions,\n\tWarriorMajorGlyph,\n\tWarriorMinorGlyph,\n\tWarrior_Rotation_StanceOption as StanceOption,\n\tWarrior_Rotation_MainGcd as MainGcd,\n} from '../core/proto/warrior.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport PreraidArmsGear from './gear_sets/preraid_arms.gear.json';\nexport const PRERAID_ARMS_PRESET = PresetUtils.makePresetGear('Preraid Arms', PreraidArmsGear, { talentTree: 0 });\nimport P1ArmsGear from './gear_sets/p1_arms.gear.json';\nexport const P1_ARMS_PRESET = PresetUtils.makePresetGear('P1 Arms', P1ArmsGear, { talentTree: 0 });\nimport P2ArmsGear from './gear_sets/p2_arms.gear.json';\nexport const P2_ARMS_PRESET = PresetUtils.makePresetGear('P2 Arms', P2ArmsGear, { talentTree: 0 });\nimport P3Arms2pAllianceGear from './gear_sets/p3_arms_2p_alliance.gear.json';\nexport const P3_ARMS_2P_PRESET_ALLIANCE = PresetUtils.makePresetGear('P3 Arms 2p [A]', P3Arms2pAllianceGear, { talentTree: 0, faction: Faction.Alliance });\nimport P3Arms4pAllianceGear from './gear_sets/p3_arms_4p_alliance.gear.json';\nexport const P3_ARMS_4P_PRESET_ALLIANCE = PresetUtils.makePresetGear('P3 Arms 4p [A]', P3Arms4pAllianceGear, { talentTree: 0, faction: Faction.Alliance });\nimport P3Arms2pHordeGear from './gear_sets/p3_arms_2p_horde.gear.json';\nexport const P3_ARMS_2P_PRESET_HORDE = PresetUtils.makePresetGear('P3 Arms 2p [H]', P3Arms2pHordeGear, { talentTree: 0, faction: Faction.Horde });\nimport P3Arms4pHordeGear from './gear_sets/p3_arms_4p_horde.gear.json';\nexport const P3_ARMS_4P_PRESET_HORDE = PresetUtils.makePresetGear('P3 Arms 4p [H]', P3Arms4pHordeGear, { talentTree: 0, faction: Faction.Horde });\nimport P4ArmsAllianceGear from './gear_sets/p4_arms_alliance.gear.json';\nexport const P4_ARMS_PRESET_ALLIANCE = PresetUtils.makePresetGear('P4 Arms [A]', P4ArmsAllianceGear, { talentTree: 0, faction: Faction.Alliance });\nimport P4ArmsHordeGear from './gear_sets/p4_arms_horde.gear.json';\nexport const P4_ARMS_PRESET_HORDE = PresetUtils.makePresetGear('P4 Arms [H]', P4ArmsHordeGear, { talentTree: 0, faction: Faction.Horde });\nimport PreraidFuryGear from './gear_sets/preraid_fury.gear.json';\nexport const PRERAID_FURY_PRESET = PresetUtils.makePresetGear('Preraid Fury', PreraidFuryGear, { talentTrees: [1,2] });\nimport P1FuryGear from './gear_sets/p1_fury.gear.json';\nexport const P1_FURY_PRESET = PresetUtils.makePresetGear('P1 Fury', P1FuryGear, { talentTrees: [1,2] });\nimport P2FuryGear from './gear_sets/p2_fury.gear.json';\nexport const P2_FURY_PRESET = PresetUtils.makePresetGear('P2 Fury', P2FuryGear, { talentTrees: [1,2] });\nimport P3FuryAllianceGear from './gear_sets/p3_fury_alliance.gear.json';\nexport const P3_FURY_PRESET_ALLIANCE = PresetUtils.makePresetGear('P3 Fury [A]', P3FuryAllianceGear, { talentTrees: [1,2], faction: Faction.Alliance });\nimport P3FuryHordeGear from './gear_sets/p3_fury_horde.gear.json';\nexport const P3_FURY_PRESET_HORDE = PresetUtils.makePresetGear('P3 Fury [H]', P3FuryHordeGear, { talentTrees: [1,2], faction: Faction.Horde });\nimport P4FuryAllianceGear from './gear_sets/p4_fury_alliance.gear.json';\nexport const P4_FURY_PRESET_ALLIANCE = PresetUtils.makePresetGear('P4 Fury [A]', P4FuryAllianceGear, { talentTrees: [1,2], faction: Faction.Alliance });\nimport P4FuryHordeGear from './gear_sets/p4_fury_horde.gear.json';\nexport const P4_FURY_PRESET_HORDE = PresetUtils.makePresetGear('P4 Fury [H]', P4FuryHordeGear, { talentTrees: [1,2], faction: Faction.Horde });\n\nexport const DefaultRotation = WarriorRotation.create({\n\tuseRend: true,\n\tuseCleave: false,\n\tuseOverpower: false,\n\texecutePhaseOverpower: false,\n\n\tmainGcd: MainGcd.Bloodthirst,\n\n\tsunderArmor: SunderArmor.SunderArmorMaintain,\n\n\thsRageThreshold: 12,\n\trendHealthThresholdAbove: 20,\n\trendRageThresholdBelow: 100,\n\tslamRageThreshold: 25,\n\trendCdThreshold: 0,\n\tuseHsDuringExecute: true,\n\tuseBtDuringExecute: true,\n\tuseWwDuringExecute: true,\n\tuseSlamOverExecute: true,\n\tstanceOption: StanceOption.DefaultStance,\n});\n\nexport const ArmsRotation = WarriorRotation.create({\n\tuseRend: true,\n\tuseMs: true,\n\tuseCleave: false,\n\tsunderArmor: SunderArmor.SunderArmorMaintain,\n\tmsRageThreshold: 30,\n\tslamRageThreshold: 25,\n\thsRageThreshold: 50,\n\trendCdThreshold: 0,\n\trendHealthThresholdAbove: 100,\n\tuseHsDuringExecute: true,\n\tspamExecute: true,\n\tstanceOption: StanceOption.DefaultStance,\n});\n\nimport FuryApl from './apls/fury.apl.json';\nexport const ROTATION_FURY = PresetUtils.makePresetAPLRotation('Fury', FuryApl, { talentTree: 1 });\nimport FurySunderApl from './apls/fury_sunder.apl.json';\nexport const ROTATION_FURY_SUNDER = PresetUtils.makePresetAPLRotation('Fury + Sunder', FurySunderApl, { talentTree: 1 });\nimport ArmsApl from './apls/arms.apl.json';\nexport const ROTATION_ARMS = PresetUtils.makePresetAPLRotation('Arms', ArmsApl, { talentTree: 0 });\nimport ArmsSunderApl from './apls/arms_sunder.apl.json';\nexport const ROTATION_ARMS_SUNDER = PresetUtils.makePresetAPLRotation('Arms + Sunder', ArmsSunderApl, { talentTree: 0 });\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const ArmsTalents = {\n\tname: 'Arms',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '3022032023335100102012213231251-305-2033',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfRending,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfMortalStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfThunderClap,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfCommand,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfShatteringThrow,\n\t\t}),\n\t}),\n};\n\nexport const FuryTalents = {\n\tname: 'Fury',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '32002301233-305053000520310053120500351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: WarriorMajorGlyph.GlyphOfWhirlwind,\n\t\t\tmajor2: WarriorMajorGlyph.GlyphOfHeroicStrike,\n\t\t\tmajor3: WarriorMajorGlyph.GlyphOfExecution,\n\t\t\tminor1: WarriorMinorGlyph.GlyphOfCommand,\n\t\t\tminor2: WarriorMinorGlyph.GlyphOfShatteringThrow,\n\t\t\tminor3: WarriorMinorGlyph.GlyphOfCharge,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = WarriorOptions.create({\n\tstartingRage: 0,\n\tuseRecklessness: true,\n\tuseShatteringThrow: true,\n\tdisableExpertiseGemming: false,\n\tshout: WarriorShout.WarriorShoutCommanding,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodSpicedWormBurger,\n\tdefaultPotion: Potions.IndestructiblePotion,\n\tprepopPotion: Potions.PotionOfSpeed,\n});","import {\n\tClass,\n\tDebuffs,\n\tFaction,\n\tGemColor,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat, PseudoStat,\n\tProfession,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { Player } from '../core/player.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { TypedEvent } from '../core/typed_event.js';\nimport { Gear } from '../core/proto_utils/gear.js';\nimport { PhysicalDPSGemOptimizer } from '../core/components/suggest_gems_action.js';\n\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\n\nimport * as WarriorInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecWarrior, {\n\tcssClass: 'warrior-sim-ui',\n\tcssScheme: 'warrior',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatExpertise,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatArmor,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatExpertise,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatArmor,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecWarrior>) => {\n\t\tlet stats = new Stats();\n\t\tif (!player.getInFrontOfTarget()) {\n\t\t\t// When behind target, dodge is the only outcome affected by Expertise.\n\t\t\tstats = stats.addStat(Stat.StatExpertise, player.getTalents().weaponMastery * 4 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION);\n\t\t}\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P3_FURY_PRESET_ALLIANCE.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatStrength]: 2.72,\n\t\t\t[Stat.StatAgility]: 1.82,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatExpertise]: 2.55,\n\t\t\t[Stat.StatMeleeHit]: 0.79,\n\t\t\t[Stat.StatMeleeCrit]: 2.12,\n\t\t\t[Stat.StatMeleeHaste]: 1.72,\n\t\t\t[Stat.StatArmorPenetration]: 2.17,\n\t\t\t[Stat.StatArmor]: 0.03,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 6.29,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 3.58,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\trotation: Presets.DefaultRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.FuryTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tswiftRetribution: true,\n\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\ticyTalons: true,\n\t\t\tabominationsMight: true,\n\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\n\t\t\tsanctifiedRetribution: true,\n\t\t\tbloodlust: true,\n\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t\theroicPresence: false,\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tbloodFrenzy: true,\n\t\t\theartOfTheCrusader: true,\n\t\t\tmangle: true,\n\t\t\tsunderArmor: true,\n\t\t\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\tebonPlaguebringer: true,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tWarriorInputs.ShoutPicker,\n\t\tWarriorInputs.Recklessness,\n\t\tWarriorInputs.ShatteringThrow,\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: WarriorInputs.WarriorRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\t// just for Bryntroll\n\t\tIconInputs.SpellDamageDebuff,\n\t\tIconInputs.SpellHitDebuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tWarriorInputs.StartingRage,\n\t\t\tWarriorInputs.StanceSnapshot,\n\t\t\tWarriorInputs.DisableExpertiseGemming,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: true,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.ArmsTalents,\n\t\t\tPresets.FuryTalents,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.ROTATION_FURY,\n\t\t\tPresets.ROTATION_FURY_SUNDER,\n\t\t\tPresets.ROTATION_ARMS,\n\t\t\tPresets.ROTATION_ARMS_SUNDER,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_FURY_PRESET,\n\t\t\tPresets.P1_FURY_PRESET,\n\t\t\tPresets.P2_FURY_PRESET,\n\t\t\tPresets.P3_FURY_PRESET_ALLIANCE,\n\t\t\tPresets.P3_FURY_PRESET_HORDE,\n\t\t\tPresets.P4_FURY_PRESET_ALLIANCE,\n\t\t\tPresets.P4_FURY_PRESET_HORDE,\n\t\t\tPresets.PRERAID_ARMS_PRESET,\n\t\t\tPresets.P1_ARMS_PRESET,\n\t\t\tPresets.P2_ARMS_PRESET,\n\t\t\tPresets.P3_ARMS_2P_PRESET_ALLIANCE,\n\t\t\tPresets.P3_ARMS_4P_PRESET_ALLIANCE,\n\t\t\tPresets.P3_ARMS_2P_PRESET_HORDE,\n\t\t\tPresets.P3_ARMS_4P_PRESET_HORDE,\n\t\t\tPresets.P4_ARMS_PRESET_ALLIANCE,\n\t\t\tPresets.P4_ARMS_PRESET_HORDE,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecWarrior>): APLRotation => {\n\t\tconst talentTree = player.getTalentTree();\n\t\tif (talentTree == 0) {\n\t\t\treturn Presets.ROTATION_ARMS_SUNDER.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_FURY_SUNDER.rotation.rotation!;\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecWarrior,\n\t\t\ttooltip: 'Arms Warrior',\n\t\t\tdefaultName: 'Arms',\n\t\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 0),\n\n\t\t\ttalents: Presets.ArmsTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_ARMS_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_ARMS_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_ARMS_4P_PRESET_ALLIANCE.gear,\n\t\t\t\t\t4: Presets.P4_ARMS_PRESET_ALLIANCE.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_ARMS_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_ARMS_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_ARMS_4P_PRESET_HORDE.gear,\n\t\t\t\t\t4: Presets.P4_ARMS_PRESET_HORDE.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecWarrior,\n\t\t\ttooltip: 'Fury Warrior',\n\t\t\tdefaultName: 'Fury',\n\t\t\ticonUrl: getSpecIcon(Class.ClassWarrior, 1),\n\n\t\t\ttalents: Presets.FuryTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_FURY_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_FURY_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_FURY_PRESET_ALLIANCE.gear,\n\t\t\t\t\t4: Presets.P4_FURY_PRESET_ALLIANCE.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_FURY_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_FURY_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_FURY_PRESET_HORDE.gear,\n\t\t\t\t\t4: Presets.P4_FURY_PRESET_HORDE.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class WarriorSimUI extends IndividualSimUI<Spec.SpecWarrior> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecWarrior>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t\tconst gemOptimizer = new WarriorGemOptimizer(this);\n\t}\n}\n\nclass WarriorGemOptimizer extends PhysicalDPSGemOptimizer {\n\treadonly player: Player<Spec.SpecWarrior>;\n\n\tconstructor(simUI: IndividualSimUI<Spec.SpecWarrior>) {\n\t\tsuper(simUI, true, true, false, true);\n\t\tthis.player = simUI.player;\n\t}\n\n\tupdateGemPriority(ungemmedGear: Gear, passiveStats: Stats) {\n\t\tthis.useExpGems = !this.player.getSpecOptions().disableExpertiseGemming;\n\t\tsuper.updateGemPriority(ungemmedGear, passiveStats);\n\t}\n\n\tcalcExpTarget(): number {\n\t\tlet expTarget = super.calcExpTarget();\n\t\tconst weaponMastery = this.player.getTalents().weaponMastery;\n\t\tconst hasWeaponMasteryTalent = !!weaponMastery;\n\t\t\n\t\tif (hasWeaponMasteryTalent) {\n\t\t\texpTarget -= weaponMastery * 4 * Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION;\n\t\t}\n\n\t\treturn expTarget;\n\t}\n}\n"],"names":["Recklessness","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","ShatteringThrow","StartingRage","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","StanceSnapshot","InputHelpers.makeSpecOptionsBooleanInput","DisableExpertiseGemming","ShoutPicker","InputHelpers.makeSpecOptionsEnumIconInput","values","color","value","WarriorShout","WarriorShoutNone","actionId","WarriorShoutBattle","WarriorShoutCommanding","WarriorRotationConfig","inputs","InputHelpers.makeRotationBooleanInput","changeEmitter","player","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","showWhen","getTalentTree","getRotation","customRotationOption","InputHelpers.makeRotationEnumInput","name","MainGcd","Slam","Bloodthirst","Whirlwind","InputHelpers.makeRotationNumberInput","useMs","useRend","useOverpower","SunderArmor","SunderArmorNone","SunderArmorHelpStack","SunderArmorMaintain","StanceOption","DefaultStance","BattleStance","BerserkerStance","sim","getShowExperimental","InputHelpers.makeCustomRotationInput","numColumns","SpellOption","BloodthirstCustom","WhirlwindCustom","SlamCustom","SlamExpiring","text","MortalStrike","Rend","Overpower","Execute","ThunderClap","PRERAID_ARMS_PRESET","PresetUtils.makePresetGear","talentTree","P1_ARMS_PRESET","P1ArmsGear","P2_ARMS_PRESET","P2ArmsGear","P3_ARMS_2P_PRESET_ALLIANCE","P3Arms2pAllianceGear","faction","Faction","Alliance","P3_ARMS_4P_PRESET_ALLIANCE","P3Arms4pAllianceGear","P3_ARMS_2P_PRESET_HORDE","P3Arms2pHordeGear","Horde","P3_ARMS_4P_PRESET_HORDE","P3Arms4pHordeGear","P4_ARMS_PRESET_ALLIANCE","P4ArmsAllianceGear","P4_ARMS_PRESET_HORDE","P4ArmsHordeGear","PRERAID_FURY_PRESET","PreraidFuryGear","talentTrees","P1_FURY_PRESET","P1FuryGear","P2_FURY_PRESET","P2FuryGear","P3_FURY_PRESET_ALLIANCE","P3FuryAllianceGear","P3_FURY_PRESET_HORDE","P3FuryHordeGear","P4_FURY_PRESET_ALLIANCE","P4FuryAllianceGear","P4_FURY_PRESET_HORDE","P4FuryHordeGear","DefaultRotation","WarriorRotation","create","useCleave","executePhaseOverpower","mainGcd","sunderArmor","hsRageThreshold","rendHealthThresholdAbove","rendRageThresholdBelow","slamRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","useWwDuringExecute","useSlamOverExecute","stanceOption","msRageThreshold","spamExecute","ROTATION_FURY","PresetUtils.makePresetAPLRotation","FuryApl","ROTATION_FURY_SUNDER","FurySunderApl","ROTATION_ARMS","ArmsApl","ROTATION_ARMS_SUNDER","ArmsSunderApl","ArmsTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","WarriorMajorGlyph","GlyphOfRending","major2","GlyphOfMortalStrike","major3","GlyphOfExecution","minor1","WarriorMinorGlyph","GlyphOfThunderClap","minor2","GlyphOfCommand","minor3","GlyphOfShatteringThrow","FuryTalents","GlyphOfWhirlwind","GlyphOfHeroicStrike","GlyphOfCharge","DefaultOptions","WarriorOptions","startingRage","useRecklessness","useShatteringThrow","disableExpertiseGemming","shout","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodSpicedWormBurger","defaultPotion","Potions","IndestructiblePotion","prepopPotion","PotionOfSpeed","SPEC_CONFIG","registerSpecConfig","Spec","SpecWarrior","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatArmor","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","modifyDisplayStats","stats","Stats","getInFrontOfTarget","addStat","getTalents","weaponMastery","Mechanics.EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","talents","defaults","gear","Presets.P3_FURY_PRESET_ALLIANCE","epWeights","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","Presets.FuryTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","heartOfTheCrusader","mangle","curseOfWeakness","faerieFire","ebonPlaguebringer","playerIconInputs","WarriorInputs.ShoutPicker","WarriorInputs.Recklessness","WarriorInputs.ShatteringThrow","rotationInputs","WarriorInputs.WarriorRotationConfig","includeBuffDebuffInputs","IconInputs.SpellDamageDebuff","IconInputs.SpellHitDebuff","excludeBuffDebuffInputs","otherInputs","WarriorInputs.StartingRage","WarriorInputs.StanceSnapshot","WarriorInputs.DisableExpertiseGemming","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.ArmsTalents","rotations","Presets.ROTATION_FURY","Presets.ROTATION_FURY_SUNDER","Presets.ROTATION_ARMS","Presets.ROTATION_ARMS_SUNDER","Presets.PRERAID_FURY_PRESET","Presets.P1_FURY_PRESET","Presets.P2_FURY_PRESET","Presets.P3_FURY_PRESET_HORDE","Presets.P4_FURY_PRESET_ALLIANCE","Presets.P4_FURY_PRESET_HORDE","Presets.PRERAID_ARMS_PRESET","Presets.P1_ARMS_PRESET","Presets.P2_ARMS_PRESET","Presets.P3_ARMS_2P_PRESET_ALLIANCE","Presets.P3_ARMS_4P_PRESET_ALLIANCE","Presets.P3_ARMS_2P_PRESET_HORDE","Presets.P3_ARMS_4P_PRESET_HORDE","Presets.P4_ARMS_PRESET_ALLIANCE","Presets.P4_ARMS_PRESET_HORDE","autoRotation","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassWarrior","defaultFactionRaces","Unknown","Race","RaceUnknown","RaceHuman","RaceOrc","defaultGear","WarriorSimUI","IndividualSimUI","constructor","parentElem","super","WarriorGemOptimizer","this","PhysicalDPSGemOptimizer","simUI","__publicField","updateGemPriority","ungemmedGear","passiveStats","useExpGems","getSpecOptions","calcExpTarget","expTarget"],"mappings":"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"}