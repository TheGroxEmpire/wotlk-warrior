{"version":3,"file":"sim-b8de84f4.chunk.js","sources":["../../../ui/enhancement_shaman/inputs.ts","../../../ui/enhancement_shaman/presets.ts","../../../ui/enhancement_shaman/sim.ts","../../../ui/core/components/fire_elemental_inputs.ts"],"sourcesContent":["import {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tEnhancementShaman_Options as ShamanOptions,\n\tShamanTotems,\n\tShamanShield,\n\tShamanImbue,\n\tShamanSyncType,\n\tEnhancementShaman_Rotation_PrimaryShock as PrimaryShock,\n\tEnhancementShaman_Rotation_RotationType as RotationType,\n\tEnhancementShaman_Rotation_CustomRotationSpell as CustomRotationSpell,\n\tEnhancementShaman_Rotation,\n\tEnhancementShaman_Rotation_BloodlustUse\n} from '../core/proto/shaman.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport { EventID } from 'ui/core/typed_event.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ShamanShieldInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanShield>({\n\tfieldName: 'shield',\n\tvalues: [\n\t\t{ value: ShamanShield.NoShield, tooltip: 'No Shield' },\n\t\t{ actionId: ActionId.fromSpellId(57960), value: ShamanShield.WaterShield },\n\t\t{ actionId: ActionId.fromSpellId(49281), value: ShamanShield.LightningShield },\n\t],\n});\n\nexport const ShamanImbueMH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n\tfieldName: 'imbueMh',\n\tvalues: [\n\t\t{ value: ShamanImbue.NoImbue, tooltip: 'No Main Hand Enchant' },\n\t\t{ actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n\t\t{ actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon, text: 'R10' },\n\t\t{ actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank, text: 'R9' },\n\t\t{ actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n\t],\n});\n\nexport const ShamanImbueOH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n\tfieldName: 'imbueOh',\n\tvalues: [\n\t\t{ value: ShamanImbue.NoImbue, tooltip: 'No Off Hand Enchant' },\n\t\t{ actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n\t\t{ actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon, text: 'R10' },\n\t\t{ actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank, text: 'R9' },\n\t\t{ actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n\t],\n});\n\nexport const SyncTypeInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecEnhancementShaman, ShamanSyncType>({\n\tfieldName: 'syncType',\n\tlabel: 'Sync/Stagger Setting',\n\tlabelTooltip:\n\t\t`Choose your sync or stagger option Perfect\n\t\t<ul>\n\t\t\t<li><div>Auto: Will auto pick sync options based on your weapons attack speeds</div></li>\n\t\t\t<li><div>None: No Sync or Staggering, used for mismatched weapon speeds</div></li>\n\t\t\t<li><div>Perfect Sync: Makes your weapons always attack at the same time, for match weapon speeds</div></li>\n\t\t\t<li><div>Delayed Offhand: Adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window</div></li>\n\t\t</ul>`,\n\tvalues: [\n\t\t{ name: \"Automatic\", value: ShamanSyncType.Auto },\n\t\t{ name: 'None', value: ShamanSyncType.NoSync },\n\t\t{ name: 'Perfect Sync', value: ShamanSyncType.SyncMainhandOffhandSwings },\n\t\t{ name: 'Delayed Offhand', value: ShamanSyncType.DelayOffhandSwings },\n\t],\n});\n\nexport const EnhancementShamanRotationConfig = {\n\tinputs:\n\t\t[\n\t\t\tInputHelpers.makeRotationEnumInput<Spec.SpecEnhancementShaman, RotationType>({\n\t\t\t\tfieldName: 'rotationType',\n\t\t\t\tlabel: 'Type',\n\t\t\t\tlabelTooltip:\n\t\t\t\t\t`<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div>Standard: Priority Rotation</div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div>Custom: Highest spell that is ready will be cast.</div>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>`,\n\t\t\t\tvalues: [\n\t\t\t\t\t{ name: 'Standard', value: RotationType.Priority },\n\t\t\t\t\t{ name: 'Custom', value: RotationType.Custom },\n\t\t\t\t],\n\t\t\t}),\n\t\t\tInputHelpers.makeCustomRotationInput<Spec.SpecEnhancementShaman, CustomRotationSpell>({\n\t\t\t\tfieldName: 'customRotation',\n\t\t\t\tnumColumns: 2,\n\t\t\t\tvalues: [\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49238), value: CustomRotationSpell.LightningBolt },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49238), value: CustomRotationSpell.LightningBoltWeave, text: \"Weave\" },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49238), value: CustomRotationSpell.LightningBoltDelayedWeave, text: \"Delay\" },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49271), value: CustomRotationSpell.ChainLightning },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(17364), value: CustomRotationSpell.StormstrikeDebuffMissing, text: \"Debuff\" },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(17364), value: CustomRotationSpell.Stormstrike },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49233), value: CustomRotationSpell.FlameShock },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49231), value: CustomRotationSpell.EarthShock },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(58734), value: CustomRotationSpell.MagmaTotem },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(61657), value: CustomRotationSpell.FireNova },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(60103), value: CustomRotationSpell.LavaLash },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49281), value: CustomRotationSpell.LightningShield },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(60043), value: CustomRotationSpell.LavaBurst, text: \"Weave\" },\n\t\t\t\t\t{ actionId: ActionId.fromSpellId(49236), value: CustomRotationSpell.FrostShock },\n\t\t\t\t],\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType == RotationType.Custom,\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationEnumInput<Spec.SpecEnhancementShaman, PrimaryShock>({\n\t\t\t\tfieldName: 'primaryShock',\n\t\t\t\tlabel: 'Primary Shock',\n\t\t\t\tvalues: [\n\t\t\t\t\t{ name: 'None', value: PrimaryShock.None },\n\t\t\t\t\t{ name: 'Earth Shock', value: PrimaryShock.Earth },\n\t\t\t\t\t{ name: 'Frost Shock', value: PrimaryShock.Frost },\n\t\t\t\t],\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType != RotationType.Custom\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'weaveFlameShock',\n\t\t\t\tlabel: 'Weave Flame Shock',\n\t\t\t\tlabelTooltip: 'Use Flame Shock whenever the target does not already have the DoT.',\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType != RotationType.Custom\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'flameShockClipTicks',\n\t\t\t\tlabel: 'Refresh Flame Shock at ticks remaining',\n\t\t\t\tlabelTooltip: 'Set to 0 to require the debuff be missing. A tick is 3s, affected by spell haste',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().weaveFlameShock,\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.FlameShock) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn player.getRotation().weaveFlameShock\n\t\t\t\t}\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'lightningboltWeave',\n\t\t\t\tlabel: 'Enable Weaving Lightning Bolt',\n\t\t\t\tlabelTooltip: 'Will provide a DPS increase, but is harder to execute',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getTalents().maelstromWeapon > 0,\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType != RotationType.Custom\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationEnumInput<Spec.SpecEnhancementShaman, number>({\n\t\t\t\tfieldName: 'maelstromweaponMinStack',\n\t\t\t\tlabel: 'Minimum Maelstrom Stacks to Weave',\n\t\t\t\tlabelTooltip: '3 stacks is the most realistic, however there are cases where lower might be possible, just much harder to do in practice',\n\t\t\t\tvalues: [\n\t\t\t\t\t{ name: '1', value: 1 },\n\t\t\t\t\t{ name: '2', value: 2 },\n\t\t\t\t\t{ name: '3', value: 3 },\n\t\t\t\t\t{ name: '4', value: 4 },\n\t\t\t\t],\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn player.getRotation().lightningboltWeave\n\t\t\t\t},\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'autoWeaveDelay',\n\t\t\t\tlabel: 'Weaving Delay After Auto Attack',\n\t\t\t\tlabelTooltip: 'The amount of time to wait after an auto attack before weaveing, in milliseconds',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn player.getRotation().lightningboltWeave\n\t\t\t\t},\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true\n\t\t\t\t},\n\t\t\t}), InputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'delayGcdWeave',\n\t\t\t\tlabel: 'Delay LL to Weave',\n\t\t\t\tlabelTooltip: 'The amount of time to hold Lava Lash to weave in milliseconds. Setting to 0 will disable delaying',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\n\t\t\t\t\treturn player.getRotation().lightningboltWeave\n\t\t\t\t},\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true\n\t\t\t\t},\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'delayGcdWeave',\n\t\t\t\tlabel: 'Delay Weave Time',\n\t\t\t\tlabelTooltip: 'The amount of time to hold a GCD to weave in milliseconds. Setting to 0 will disable delaying',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltDelayedWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false\n\t\t\t\t},\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.LightningBoltDelayedWeave) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false\n\t\t\t\t},\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'lavaburstWeave',\n\t\t\t\tlabel: 'Enable Weaving Lava Burst',\n\t\t\t\tlabelTooltip: 'Not particularily useful for dual wield, mostly a 2h option',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().lightningboltWeave,\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().rotationType != RotationType.Custom\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'firenovaManaThreshold',\n\t\t\t\tlabel: 'Minimum mana to cast Fire Nova',\n\t\t\t\tlabelTooltip: 'Fire Nova will not be cast when mana is below this value. Set this medium-low, it has a bad mana-to-damage ratio',\n\t\t\t\tshowWhen: (player: Player<Spec.SpecEnhancementShaman>) => {\n\t\t\t\t\tif (player.getRotation().rotationType == RotationType.Custom) {\n\t\t\t\t\t\treturn player.getRotation().customRotation?.spells.find(customSpell => customSpell.spell == CustomRotationSpell.FireNova) != undefined\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true\n\t\t\t\t},\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationNumberInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'shamanisticRageManaThreshold',\n\t\t\t\tlabel: 'Mana % to use Shamanistic Rage',\n\t\t\t\tenableWhen: (player: Player<Spec.SpecEnhancementShaman>) => player.getTalents().shamanisticRage,\n\t\t\t}),\n\t\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecEnhancementShaman>({\n\t\t\t\tfieldName: 'bloodlust',\n\t\t\t\tlabel: 'Use Bloodlust',\n\t\t\t\tlabelTooltip: 'Player will cast bloodlust',\n\t\t\t\tgetValue: (player: Player<Spec.SpecEnhancementShaman>) => player.getRotation().bloodlust == EnhancementShaman_Rotation_BloodlustUse.UseBloodlust,\n\t\t\t\tsetValue: (eventID: EventID, player: Player<Spec.SpecEnhancementShaman>, newValue: boolean) => {\n\t\t\t\t\tconst newRotation = player.getRotation();\n\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\tnewRotation.bloodlust = EnhancementShaman_Rotation_BloodlustUse.UseBloodlust;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewRotation.bloodlust = EnhancementShaman_Rotation_BloodlustUse.NoBloodlust;\n\t\t\t\t\t}\n\t\t\t\t\tplayer.setRotation(eventID, newRotation);\n\t\t\t\t},\n\t\t\t}),\n\t\t],\n};\n\n\n","import {\n\tConsumes,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPotions,\n\tRaidBuffs,\n\tTristateEffect,\n\tDebuffs,\n\tCustomRotation,\n\tCustomSpell,\n\tFaction,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport { EnhancementShaman_Rotation as EnhancementShamanRotation, EnhancementShaman_Options as EnhancementShamanOptions, ShamanShield } from '../core/proto/shaman.js';\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tFireTotem,\n\tWaterTotem,\n\tShamanTotems,\n\tShamanImbue,\n\tShamanSyncType,\n\tShamanMajorGlyph,\n\tEnhancementShaman_Rotation_PrimaryShock as PrimaryShock,\n\tEnhancementShaman_Rotation_RotationType as RotationType,\n\tEnhancementShaman_Rotation_CustomRotationSpell as CustomRotationSpell\n} from '../core/proto/shaman.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Preraid Preset', PreraidGear);\nimport P1Gear from './gear_sets/p1.gear.json';\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nimport P2FtGear from './gear_sets/p2_ft.gear.json';\nexport const P2_PRESET_FT = PresetUtils.makePresetGear('P2 Preset FT', P2FtGear);\nimport P2WfGear from './gear_sets/p2_wf.gear.json';\nexport const P2_PRESET_WF = PresetUtils.makePresetGear('P2 Preset WF', P2WfGear);\nimport P3AllianceGear from './gear_sets/p3_alliance.gear.json';\nexport const P3_PRESET_ALLIANCE = PresetUtils.makePresetGear('P3 Preset [A]', P3AllianceGear, { faction: Faction.Alliance });\nimport P3HordeGear from './gear_sets/p3_horde.gear.json';\nexport const P3_PRESET_HORDE = PresetUtils.makePresetGear('P3 Preset [H]', P3HordeGear, { faction: Faction.Horde });\nimport P4FtGear from './gear_sets/p4_ft.gear.json';\nexport const P4_PRESET_FT = PresetUtils.makePresetGear('P4 Preset FT', P4FtGear);\nimport P4WfGear from './gear_sets/p4_wf.gear.json';\nexport const P4_PRESET_WF = PresetUtils.makePresetGear('P4 Preset WF', P4WfGear);\n\nexport const DefaultRotation = EnhancementShamanRotation.create({\n\ttotems: ShamanTotems.create({\n\t\tearth: EarthTotem.StrengthOfEarthTotem,\n\t\tair: AirTotem.WindfuryTotem,\n\t\tfire: FireTotem.MagmaTotem,\n\t\twater: WaterTotem.ManaSpringTotem,\n\t\tuseFireElemental: true,\n\t}),\n\tmaelstromweaponMinStack: 3,\n\tlightningboltWeave: true,\n\tautoWeaveDelay: 500,\n\tdelayGcdWeave: 750,\n\tlavaburstWeave: false,\n\tfirenovaManaThreshold: 3000,\n\tshamanisticRageManaThreshold: 25,\n\tprimaryShock: PrimaryShock.Earth,\n\tweaveFlameShock: true,\n\trotationType: RotationType.Priority,\n\tcustomRotation: CustomRotation.create({\n\t\tspells: [\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LightningBolt }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.StormstrikeDebuffMissing }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LightningBoltWeave }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.Stormstrike }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.FlameShock }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.EarthShock }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.MagmaTotem }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LightningShield }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.FireNova }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LightningBoltDelayedWeave }),\n\t\t\tCustomSpell.create({ spell: CustomRotationSpell.LavaLash }),\n\t\t],\n\t}),\n});\n\n\nimport DefaultFt from './apls/default_ft.apl.json';\nexport const ROTATION_FT_DEFAULT = PresetUtils.makePresetAPLRotation('Default FT', DefaultFt);\nimport DefaultWf from './apls/default_wf.apl.json';\nexport const ROTATION_WF_DEFAULT = PresetUtils.makePresetAPLRotation('Default WF', DefaultWf);\nimport Phase3Apl from './apls/phase_3.apl.json';\nexport const ROTATION_PHASE_3 = PresetUtils.makePresetAPLRotation('Phase 3', Phase3Apl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '053030152-30405003105021333031131031051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfFireNova,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n\t\t\t//minor glyphs dont affect damage done, all convenience/QoL\n\t\t})\n\t}),\n};\n\nexport const Phase3Talents = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '053030152-30505003105001333031131131051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: ShamanMajorGlyph.GlyphOfFireNova,\n\t\t\tmajor2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t\tmajor3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n\t\t\t//minor glyphs dont affect damage done, all convenience/QoL\n\t\t})\n\t}),\n};\n\nexport const DefaultOptions = EnhancementShamanOptions.create({\n\tshield: ShamanShield.LightningShield,\n\tbloodlust: true,\n\timbueMh: ShamanImbue.WindfuryWeapon,\n\timbueOh: ShamanImbue.FlametongueWeapon,\n\tsyncType: ShamanSyncType.Auto,\n\ttotems: ShamanTotems.create({\n\t\tearth: \tEarthTotem.StrengthOfEarthTotem,\n\t\tfire: \tFireTotem.MagmaTotem,\n\t\twater: \tWaterTotem.ManaSpringTotem,\n\t\tair: \tAirTotem.WindfuryTotem,\n\t})\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodFishFeast,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\ttotemOfWrath: true,\n\twrathOfAirTotem: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\tsanctifiedRetribution: true,\n\tdivineSpirit: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdemonicPact: 500,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tbloodFrenzy: true,\n\tsunderArmor: true,\n\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\tcurseOfElements: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\tjudgementOfWisdom: true,\n\tmisery: true,\n\ttotemOfWrath: true,\n\tshadowMastery: true,\n});\n","import {\n\tClass,\n\tFaction,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tSpec,\n\tStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { ShamanImbue } from '../core/proto/shaman.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { TotemsSection } from '../core/components/totem_inputs.js';\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\n\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\nimport { FireElementalSection } from '../core/components/fire_elemental_inputs.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecEnhancementShaman, {\n\tcssClass: 'enhancement-shaman-sim-ui',\n\tcssScheme: 'shaman',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellHaste,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatExpertise,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P4_PRESET_WF.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 1.48,\n\t\t\t[Stat.StatAgility]: 1.59,\n\t\t\t[Stat.StatStrength]: 1.1,\n\t\t\t[Stat.StatSpellPower]: 1.13,\n\t\t\t[Stat.StatSpellHit]: 0, //default EP assumes cap\n\t\t\t[Stat.StatSpellCrit]: 0.91,\n\t\t\t[Stat.StatSpellHaste]: 0.37,\n\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t[Stat.StatMeleeHit]: 1.38,\n\t\t\t[Stat.StatMeleeCrit]: 0.81,\n\t\t\t[Stat.StatMeleeHaste]: 1.61, //haste is complicated\n\t\t\t[Stat.StatArmorPenetration]: 0.48,\n\t\t\t[Stat.StatExpertise]: 0, //default EP assumes cap\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 5.21,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.21,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\trotation: Presets.DefaultRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.StandardTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\tjudgementsOfTheWise: true,\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tShamanInputs.ShamanShieldInput,\n\t\tShamanInputs.ShamanImbueMH,\n\t\tShamanInputs.ShamanImbueOH,\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: ShamanInputs.EnhancementShamanRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tIconInputs.ReplenishmentBuff,\n\t\tIconInputs.MP5Buff,\n\t\tIconInputs.SpellHasteBuff,\n\t\tIconInputs.SpiritBuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t\tIconInputs.BleedDebuff,\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tShamanInputs.SyncTypeInput,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\titemSwapSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand],\n\tcustomSections: [\n\t\tTotemsSection,\n\t\tFireElementalSection\n\t],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.StandardTalents,\n\t\t\tPresets.Phase3Talents,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.ROTATION_FT_DEFAULT,\n\t\t\tPresets.ROTATION_WF_DEFAULT,\n\t\t\tPresets.ROTATION_PHASE_3,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_PRESET,\n\t\t\tPresets.P1_PRESET,\n\t\t\tPresets.P2_PRESET_FT,\n\t\t\tPresets.P2_PRESET_WF,\n\t\t\tPresets.P3_PRESET_ALLIANCE,\n\t\t\tPresets.P3_PRESET_HORDE,\n\t\t\tPresets.P4_PRESET_FT,\n\t\t\tPresets.P4_PRESET_WF,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecEnhancementShaman>): APLRotation => {\n\t\tconst hasT94P = player.getCurrentStats().sets.includes('Triumphant Nobundo\\'s Battlegear (4pc)')\n\t\t\t|| player.getCurrentStats().sets.includes('Nobundo\\'s Battlegear (4pc)')\n\t\t\t|| player.getCurrentStats().sets.includes('Triumphant Thrall\\'s Battlegear (4pc)')\n\t\t\t|| player.getCurrentStats().sets.includes('Thrall\\'s Battlegear (4pc)');\n\t\tconst options = player.getSpecOptions();\n\n\t\tif (hasT94P) {\n\t\t\tconsole.log(\"has set\");\n\t\t\treturn Presets.ROTATION_PHASE_3.rotation.rotation!;\n\t\t} else if (options.imbueMh == ShamanImbue.FlametongueWeapon) {\n\t\t\treturn Presets.ROTATION_FT_DEFAULT.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_WF_DEFAULT.rotation.rotation!;\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecEnhancementShaman,\n\t\t\ttooltip: specNames[Spec.SpecEnhancementShaman],\n\t\t\tdefaultName: 'Enhancement',\n\t\t\ticonUrl: getSpecIcon(Class.ClassShaman, 1),\n\n\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_FT.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_ALLIANCE.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_FT.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_FT.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_HORDE.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_FT.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class EnhancementShamanSimUI extends IndividualSimUI<Spec.SpecEnhancementShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecEnhancementShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n","import { IndividualSimUI } from \"../individual_sim_ui\";\nimport { Player } from \"../player\";\nimport { ShamanTotems } from \"../proto/shaman\";\nimport { ShamanSpecs } from \"../proto_utils/utils\";\nimport { EventID } from \"../typed_event\";\nimport { ContentBlock } from \"./content_block\";\nimport { IconPicker } from \"./icon_picker\";\nimport * as InputHelpers from '../components/input_helpers.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { Input } from \"./input\";\nimport { NumberPicker } from \"./number_picker\";\nimport { BooleanPicker } from \"./boolean_picker\";\n\nexport function FireElementalSection(parentElem: HTMLElement, simUI: IndividualSimUI<ShamanSpecs>): ContentBlock {\n\tlet contentBlock = new ContentBlock(parentElem, 'fire-elemental-settings', {\n\t\theader: { title: 'Fire Elemental' }\n\t});\n\n\tlet fireElementalIconContainer = Input.newGroupContainer();\n\tfireElementalIconContainer.classList.add('fire-elemental-icon-container');\n\n\tcontentBlock.bodyElement.appendChild(fireElementalIconContainer);\n\n\tconst fireElementalBooleanIconInput = InputHelpers.makeBooleanIconInput<ShamanSpecs, ShamanTotems, Player<ShamanSpecs>>({\n\t\tgetModObject: (player: Player<ShamanSpecs>) => player,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems || ShamanTotems.create(),\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: ShamanTotems) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\t\t\tnewOptions.totems = newVal;\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\n\t\t\t// Hacky fix ItemSwapping is in the Rotation proto, this will let the Rotation know to update showWhen\n\t\t\t// TODO move the ItemSwap enabled to a spec option and have the ItemSwap proto be apart of player.\n\t\t\tplayer.rotationChangeEmitter.emit(eventID)\n\t\t},\n\t\tchangeEmitter: (player: Player<ShamanSpecs>) => player.specOptionsChangeEmitter,\n\t}, ActionId.fromSpellId(2894), \"useFireElemental\");\n\n\tnew IconPicker(fireElementalIconContainer, simUI.player, fireElementalBooleanIconInput);\n\n\tnew NumberPicker(contentBlock.bodyElement, simUI.player, {\n\t\tpositive: true,\n\t\tlabel: \"Bonus spell power\",\n\t\tlabelTooltip: \"Bonus spell power to snapshot Fire Elemental with. Will prioritize dropping Fire Elemental if greater then 0\",\n\t\tinline: true,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems?.bonusSpellpower || 0,\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: number) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\n\t\t\tif (newOptions.totems) {\n\t\t\t\tnewOptions.totems.bonusSpellpower = newVal\n\t\t\t}\n\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t},\n\t\tchangedEvent: (player: Player<ShamanSpecs>) => player.specOptionsChangeEmitter,\n\t})\n\n\tnew BooleanPicker(contentBlock.bodyElement, simUI.player, {\n\t\tlabel: \"Use Tier 10 (4pc)\",\n\t\tlabelTooltip: \"Will use Tier 10 (4pc) to snapshot Fire Elemental.\",\n\t\tinline: true,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getSpecOptions().totems?.enhTierTenBonus || false,\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: boolean) => {\n\t\t\tconst newOptions = player.getSpecOptions();\n\n\t\t\tif (newOptions.totems) {\n\t\t\t\tnewOptions.totems.enhTierTenBonus = newVal\n\t\t\t}\n\n\t\t\tplayer.setSpecOptions(eventID, newOptions);\n\t\t},\n\t\tchangedEvent: (player: Player<ShamanSpecs>) => player.currentStatsEmitter,\n\t\tshowWhen: (player: Player<ShamanSpecs>) => {\n\t\t\tconst hasBonus = player.getCurrentStats().sets.includes('Frost Witch\\'s Battlegear (4pc)');\n\t\t\treturn hasBonus\n\t\t}\n\t})\n\n\n\treturn contentBlock;\n}"],"names":["ShamanShieldInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","ShamanShield","NoShield","tooltip","actionId","ActionId","fromSpellId","WaterShield","LightningShield","ShamanImbueMH","ShamanImbue","NoImbue","WindfuryWeapon","FlametongueWeapon","text","FlametongueWeaponDownrank","FrostbrandWeapon","ShamanImbueOH","SyncTypeInput","InputHelpers.makeSpecOptionsEnumInput","label","labelTooltip","name","ShamanSyncType","Auto","NoSync","SyncMainhandOffhandSwings","DelayOffhandSwings","EnhancementShamanRotationConfig","inputs","InputHelpers.makeRotationEnumInput","RotationType","Priority","Custom","InputHelpers.makeCustomRotationInput","numColumns","CustomRotationSpell","LightningBolt","LightningBoltWeave","LightningBoltDelayedWeave","ChainLightning","StormstrikeDebuffMissing","Stormstrike","FlameShock","EarthShock","MagmaTotem","FireNova","LavaLash","LavaBurst","FrostShock","showWhen","player","getRotation","rotationType","PrimaryShock","None","Earth","Frost","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationNumberInput","enableWhen","weaveFlameShock","customRotation","spells","find","customSpell","spell","getTalents","maelstromWeapon","lightningboltWeave","shamanisticRage","getValue","bloodlust","EnhancementShaman_Rotation_BloodlustUse","UseBloodlust","setValue","eventID","newValue","newRotation","NoBloodlust","setRotation","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET_FT","P2FtGear","P2_PRESET_WF","P2WfGear","P3_PRESET_ALLIANCE","P3AllianceGear","faction","Faction","Alliance","P3_PRESET_HORDE","P3HordeGear","Horde","P4_PRESET_FT","P4FtGear","P4_PRESET_WF","P4WfGear","DefaultRotation","EnhancementShamanRotation","create","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","air","AirTotem","WindfuryTotem","fire","FireTotem","water","WaterTotem","ManaSpringTotem","useFireElemental","maelstromweaponMinStack","autoWeaveDelay","delayGcdWeave","lavaburstWeave","firenovaManaThreshold","shamanisticRageManaThreshold","primaryShock","CustomRotation","CustomSpell","ROTATION_FT_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultFt","ROTATION_WF_DEFAULT","DefaultWf","ROTATION_PHASE_3","Phase3Apl","StandardTalents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","ShamanMajorGlyph","GlyphOfFireNova","major2","GlyphOfFlametongueWeapon","major3","GlyphOfFeralSpirit","Phase3Talents","DefaultOptions","EnhancementShamanOptions","shield","imbueMh","imbueOh","syncType","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfEndlessRage","food","Food","FoodFishFeast","DefaultRaidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","arcaneBrilliance","leaderOfThePack","totemOfWrath","wrathOfAirTotem","moonkinAura","sanctifiedRetribution","divineSpirit","battleShout","demonicPact","DefaultDebuffs","Debuffs","bloodFrenzy","sunderArmor","curseOfWeakness","TristateEffectRegular","curseOfElements","faerieFire","judgementOfWisdom","misery","shadowMastery","SPEC_CONFIG","registerSpecConfig","Spec","SpecEnhancementShaman","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatSpellPower","StatSpellCrit","StatSpellHit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.P4_PRESET_WF","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","judgementsOfTheWise","debuffs","Presets.DefaultDebuffs","playerIconInputs","ShamanInputs.ShamanShieldInput","ShamanInputs.ShamanImbueMH","ShamanInputs.ShamanImbueOH","rotationInputs","ShamanInputs.EnhancementShamanRotationConfig","includeBuffDebuffInputs","IconInputs.ReplenishmentBuff","IconInputs.MP5Buff","IconInputs.SpellHasteBuff","IconInputs.SpiritBuff","excludeBuffDebuffInputs","IconInputs.BleedDebuff","otherInputs","ShamanInputs.SyncTypeInput","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","itemSwapSlots","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","customSections","TotemsSection","parentElem","simUI","contentBlock","ContentBlock","header","title","fireElementalIconContainer","Input","newGroupContainer","classList","add","bodyElement","appendChild","fireElementalBooleanIconInput","InputHelpers.makeBooleanIconInput","getModObject","getSpecOptions","newVal","newOptions","setSpecOptions","rotationChangeEmitter","emit","changeEmitter","specOptionsChangeEmitter","IconPicker","NumberPicker","positive","inline","bonusSpellpower","changedEvent","BooleanPicker","enhTierTenBonus","currentStatsEmitter","getCurrentStats","sets","includes","encounterPicker","showExecuteProportion","presets","Presets.Phase3Talents","rotations","Presets.ROTATION_FT_DEFAULT","Presets.ROTATION_WF_DEFAULT","Presets.ROTATION_PHASE_3","Presets.PRERAID_PRESET","Presets.P1_PRESET","Presets.P2_PRESET_FT","Presets.P2_PRESET_WF","Presets.P3_PRESET_ALLIANCE","Presets.P3_PRESET_HORDE","Presets.P4_PRESET_FT","autoRotation","hasT94P","options","console","log","raidSimPresets","spec","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassShaman","defaultFactionRaces","Unknown","Race","RaceUnknown","RaceDraenei","RaceOrc","defaultGear","EnhancementShamanSimUI","IndividualSimUI","constructor","super"],"mappings":"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"}