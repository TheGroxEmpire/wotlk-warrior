{"version":3,"file":"sim-c2b32e1b.chunk.js","sources":["../../../ui/deathknight/inputs.ts","../../../ui/deathknight/presets.ts","../../../ui/deathknight/sim.ts"],"sourcesContent":["import { ItemSlot, Spec } from '../core/proto/common.js';\nimport { UnitReference, UnitReference_Type as UnitType } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport {\n\tDeathknightTalents as DeathKnightTalents,\n\tDeathknight_Rotation_ArmyOfTheDead as ArmyOfTheDead,\n\tDeathknight_Rotation_DrwDiseases as DrwDiseases,\n\tDeathknight_Rotation_BloodOpener as BloodOpener,\n\tDeathknight_Rotation_BloodSpell as BloodSpell,\n\tDeathknight_Rotation_FirstDisease as FirstDisease,\n\tDeathknight_Rotation_DeathAndDecayPrio as DeathAndDecayPrio,\n\tDeathknight_Rotation_Presence as StartingPresence,\n\tDeathknight_Rotation_BloodRuneFiller as BloodRuneFiller,\n\tDeathknight_Rotation_BloodTap as BloodTap,\n\tDeathknight_Rotation_FrostRotationType as FrostRotationType,\n\tDeathknight_Rotation_CustomSpellOption as CustomSpellOption,\n\tDeathknight_Rotation as DeathKnightRotation,\n\tDeathknight_Options as DeathKnightOptions,\n\tDeathknightMajorGlyph,\n} from '../core/proto/deathknight.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\nimport { Player } from '../core/player';\nimport { EventID, TypedEvent } from '../core/typed_event';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfUnholyFrenzy = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'unholyFrenzyTarget',\n\tlabel: 'Self Unholy Frenzy',\n\tlabelTooltip: 'Cast Unholy Frenzy on yourself.',\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecDeathknight>) => player.getSpecOptions().unholyFrenzyTarget?.type == UnitType.Player,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecDeathknight>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = UnitReference.create({\n\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\n\t\t\tindex: 0,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().hysteria,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const StartingRunicPower = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'startingRunicPower',\n\tlabel: 'Starting Runic Power',\n\tlabelTooltip: 'Initial RP at the start of each iteration.',\n});\n\nexport const PetUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'petUptime',\n\tlabel: 'Ghoul Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which your ghoul will be on target.',\n\tpercent: true,\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().masterOfGhouls,\n});\n\nexport const PrecastGhoulFrenzy = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'precastGhoulFrenzy',\n\tlabel: 'Pre-Cast Ghoul Frenzy',\n\tlabelTooltip: 'Cast Ghoul Frenzy 10 seconds before combat starts.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && player.getTalents().ghoulFrenzy,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const PrecastHornOfWinter = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'precastHornOfWinter',\n\tlabel: 'Pre-Cast Horn of Winter',\n\tlabelTooltip: 'Precast Horn of Winter for 10 extra runic power before fight.',\n});\n\nexport const DrwPestiApply = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'drwPestiApply',\n\tlabel: 'DRW Pestilence Add',\n\tlabelTooltip: 'There is currently an interaction with DRW and pestilence where you can use pestilence to force DRW to apply diseases if they are already applied by the DK. It only works with Glyph of Disease and if there is an off target. This toggle forces the sim to assume there is an off target.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() == 0 && (player.getGlyphs().major1 == DeathknightMajorGlyph.GlyphOfDisease || player.getGlyphs().major2 == DeathknightMajorGlyph.GlyphOfDisease || player.getGlyphs().major3 == DeathknightMajorGlyph.GlyphOfDisease),\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const UseAMSInput = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useAms',\n\tlabel: 'Use AMS',\n\tlabelTooltip: 'Use AMS around predicted damage for a RP gain.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const AvgAMSSuccessRateInput = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'avgAmsSuccessRate',\n\tlabel: 'Avg AMS Success %',\n\tlabelTooltip: 'Chance for damage to be taken during the 5 second window of AMS.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getSpecOptions().useAms == true && player.getTalents().howlingBlast,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const AvgAMSHitInput = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'avgAmsHit',\n\tlabel: 'Avg AMS Hit',\n\tlabelTooltip: 'How much on average (+-10%) the character is hit for when AMS is successful.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getSpecOptions().useAms == true && player.getTalents().howlingBlast,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.specOptionsChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const DiseaseRefreshDuration = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'diseaseRefreshDuration',\n\tlabel: 'Disease Refresh Duration',\n\tlabelTooltip: 'Minimum duration for refreshing a disease.',\n});\n\nexport const UseDeathAndDecay = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useDeathAndDecay',\n\tlabel: 'Death and Decay',\n\tlabelTooltip: 'Use Death and Decay based rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => (player.getTalents().summonGargoyle && player.getTalents().scourgeStrike && !player.getRotation().autoRotation) || (!player.getTalents().epidemic && !player.getRotation().desyncRotation && player.getTalentTree() == 1 && player.sim.encounter.targets.length >= 3),\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter, player.sim.encounter.targetsChangeEmitter]),\n});\n\nexport const SetDeathAndDecayPrio = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, DeathAndDecayPrio>({\n\tfieldName: 'deathAndDecayPrio',\n\tlabel: 'Death and Decay Prio',\n\tlabelTooltip: '<p>Chose how to prioritize death and decay usage:</p>\\\n\t\t<p><b>Max Rune Downtime</b>: Prioritizes spending runes over holding them for death and decay</p>\\\n\t\t<p><b>Max Dnd Uptime</b>: Prioritizes dnd uptime and can hold runes for longer then rune grace</p>',\n\tvalues: [\n\t\t{ name: 'Max Rune Downtime', value: DeathAndDecayPrio.MaxRuneDowntime },\n\t\t{ name: 'Max Dnd Uptime', value: DeathAndDecayPrio.MaxDndUptime },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && (player.getRotation().useDeathAndDecay || !player.getTalents().scourgeStrike) && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const UseEmpowerRuneWeapon = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useEmpowerRuneWeapon',\n\tlabel: 'Empower Rune Weapon',\n\tlabelTooltip: 'Use Empower Rune Weapon in rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() != 0 && player.getRotation().frostRotationType != FrostRotationType.Custom,\n});\n\nexport const UseGargoyle = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useGargoyle',\n\tlabel: 'Summon Gargoyle',\n\tlabelTooltip: 'Use Summon Gargoyle in rotation.',\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n});\n\nexport const HoldErwArmy = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'holdErwArmy',\n\tlabel: 'Hold ERW for AotD',\n\tlabelTooltip: 'Hold Empower Rune Weapon for after Summon Gargoyle to guarantee maximized snapshot for Army of the Dead.',\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getRotation().useEmpowerRuneWeapon && player.getRotation().armyOfTheDead == ArmyOfTheDead.AsMajorCd && player.getTalentTree() != 0,\n});\n\nexport const BloodlustPresence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'blPresence',\n\tlabel: 'Bloodlust Presence',\n\tlabelTooltip: 'Presence during bloodlust.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const GargoylePresence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'gargoylePresence',\n\tlabel: 'Gargoyle Presence',\n\tlabelTooltip: 'Presence during Gargoyle.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation && !player.getRotation().preNerfedGargoyle,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodTapGhoulFrenzy = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'btGhoulFrenzy',\n\tlabel: 'BT Ghoul Frenzy',\n\tlabelTooltip: 'Use Ghoul Frenzy only with Blood Tap.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().ghoulFrenzy && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const FirstDiseaseInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, FirstDisease>({\n\tfieldName: 'firstDisease',\n\tlabel: 'First Disease',\n\tlabelTooltip: 'Chose which disease to apply first.',\n\tvalues: [\n\t\t{ name: 'Frost Fever', value: FirstDisease.FrostFever },\n\t\t{ name: 'Blood Plague', value: FirstDisease.BloodPlague },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const ArmyOfTheDeadInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, ArmyOfTheDead>({\n\tfieldName: 'armyOfTheDead',\n\tlabel: 'Army of the Dead',\n\tlabelTooltip: 'Chose how to use Army of the Dead.',\n\tvalues: [\n\t\t{ name: 'Do not use', value: ArmyOfTheDead.DoNotUse },\n\t\t{ name: 'Pre pull', value: ArmyOfTheDead.PreCast },\n\t\t{ name: 'As Major CD', value: ArmyOfTheDead.AsMajorCd },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const StartingPresenceInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'startingPresence',\n\tlabel: 'Starting Presence',\n\tlabelTooltip: 'Chose the presence you start combat in.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const FightPresence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'presence',\n\tlabel: 'Fight Presence',\n\tlabelTooltip: 'Presence to be in during the encounter.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodRuneFillerInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodRuneFiller>({\n\tfieldName: 'bloodRuneFiller',\n\tlabel: 'Blood Rune Filler',\n\tlabelTooltip: 'Chose what to spend your free blood runes on.',\n\tvalues: [\n\t\t{ name: 'Blood Strike', value: BloodRuneFiller.BloodStrike },\n\t\t{ name: 'Blood Boil', value: BloodRuneFiller.BloodBoil },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const PreNerfedGargoyleInput = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'preNerfedGargoyle',\n\tlabel: 'Pre-Nerfed Gargoyle (haste snapshot)',\n\tlabelTooltip: \"Use old Gargoyle that snapshots haste\",\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation && player.sim.getShowExperimental(),\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const BloodTapInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodTap>({\n\tfieldName: 'bloodTap',\n\tlabel: 'Blood Tap',\n\tlabelTooltip: 'Chose what to spend your Blood Tap on.',\n\tvalues: [\n\t\t{ name: 'Ghoul Frenzy', value: BloodTap.GhoulFrenzy },\n\t\t{ name: 'Icy Touch', value: BloodTap.IcyTouch },\n\t\t{ name: 'Blood Strike', value: BloodTap.BloodStrikeBT },\n\t\t{ name: 'Blood Boil', value: BloodTap.BloodBoilBT },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().summonGargoyle && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const UseAutoRotation = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'autoRotation',\n\tlabel: 'Automatic Rotation',\n\tlabelTooltip: 'Have sim automatically adjust rotation based on the scenario. This is still in development and currently only works for Unholy.',\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getTalents().howlingBlast,\n});\n\nexport const DesyncRotation = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'desyncRotation',\n\tlabel: 'Use Desync Rotation',\n\tlabelTooltip: 'Use the Desync Rotation.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getTalents().epidemic && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const Presence = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, StartingPresence>({\n\tfieldName: 'presence',\n\tlabel: 'Presence',\n\tlabelTooltip: 'Presence to be in during the encounter.',\n\tvalues: [\n\t\t{ name: 'Blood', value: StartingPresence.Blood },\n\t\t{ name: 'Frost', value: StartingPresence.Frost },\n\t\t{ name: 'Unholy', value: StartingPresence.Unholy },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodSpenderInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodSpell>({\n\tfieldName: 'bloodSpender',\n\tlabel: 'Blood Spender',\n\tlabelTooltip: 'Chose how to use Blood Runes.',\n\tvalues: [\n\t\t{ name: 'Heart Strike', value: BloodSpell.HS },\n\t\t{ name: 'Blood Boil', value: BloodSpell.BB },\n\t\t{ name: 'Blood Strike', value: BloodSpell.BS },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() == 0,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const UseDancingRuneWeapon = InputHelpers.makeRotationBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'useDancingRuneWeapon',\n\tlabel: 'Dancing Rune Weapon',\n\tlabelTooltip: 'Use Dancing Rune Weapon.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().dancingRuneWeapon && !player.getRotation().autoRotation,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const DrwDiseasesInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, DrwDiseases>({\n\tfieldName: 'drwDiseases',\n\tlabel: 'DRW Disease',\n\tlabelTooltip: 'Chose how to apply diseases for Dancing Rune Weapon.',\n\tvalues: [\n\t\t{ name: 'Do not apply', value: DrwDiseases.DoNotApply },\n\t\t{ name: 'IT + PS', value: DrwDiseases.Normal },\n\t\t{ name: 'Pestilence', value: DrwDiseases.Pestilence },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().useDancingRuneWeapon && !player.getRotation().autoRotation && player.getTalents().dancingRuneWeapon && player.getRotation().bloodOpener == BloodOpener.Standard,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const BloodOpenerInput = InputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, BloodOpener>({\n\tfieldName: 'bloodOpener',\n\tlabel: 'Opener',\n\tlabelTooltip: 'Chose which opener to use.',\n\tvalues: [\n\t\t{ name: 'Standard', value: BloodOpener.Standard },\n\t\t{ name: 'Incan', value: BloodOpener.Experimental_1 },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() == 0,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const FrostCustomRotation = InputHelpers.makeCustomRotationInput<Spec.SpecDeathknight, CustomSpellOption>({\n\tfieldName: 'frostCustomRotation',\n\tnumColumns: 4,\n\tvalues: [\n\t\t{ actionId: ActionId.fromSpellId(49909), value: CustomSpellOption.CustomIcyTouch },\n\t\t{ actionId: ActionId.fromSpellId(49921), value: CustomSpellOption.CustomPlagueStrike },\n\t\t{ actionId: ActionId.fromSpellId(50842), value: CustomSpellOption.CustomPestilence },\n\t\t{ actionId: ActionId.fromSpellId(51425), value: CustomSpellOption.CustomObliterate },\n\t\t{ actionId: ActionId.fromSpellId(51411), value: CustomSpellOption.CustomHowlingBlast },\n\t\t{ actionId: ActionId.fromSpellId(59052), value: CustomSpellOption.CustomHowlingBlastRime },\n\t\t{ actionId: ActionId.fromSpellId(49941), value: CustomSpellOption.CustomBloodBoil },\n\t\t{ actionId: ActionId.fromSpellId(49930), value: CustomSpellOption.CustomBloodStrike },\n\t\t{ actionId: ActionId.fromSpellId(49938), value: CustomSpellOption.CustomDeathAndDecay },\n\t\t{ actionId: ActionId.fromSpellId(57623), value: CustomSpellOption.CustomHornOfWinter },\n\t\t{ actionId: ActionId.fromSpellId(51271), value: CustomSpellOption.CustomUnbreakableArmor },\n\t\t{ actionId: ActionId.fromSpellId(45529), value: CustomSpellOption.CustomBloodTap },\n\t\t{ actionId: ActionId.fromSpellId(47568), value: CustomSpellOption.CustomEmpoweredRuneWeapon },\n\t\t{ actionId: ActionId.fromSpellId(55268), value: CustomSpellOption.CustomFrostStrike },\n\t],\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getRotation().frostRotationType == FrostRotationType.Custom,\n});\n\nexport const NewDrwInput = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecDeathknight>({\n\tfieldName: 'newDrw',\n\tlabel: 'PTR DRW Scaling',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().dancingRuneWeapon && player.getRotation().useDancingRuneWeapon,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n})\n\nexport const DiseaseDowntime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'diseaseDowntime',\n\tlabel: 'Disease Downtime',\n\tlabelTooltip: 'Maximum allowed downtime between disease applications.',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => !player.getRotation().autoRotation && player.getTalentTree() == 2,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n});\n\nexport const VirulenceRefreshTime = InputHelpers.makeRotationNumberInput<Spec.SpecDeathknight>({\n\tfieldName: 'virulenceRefresh',\n\tlabel: 'Virulence Refresh',\n\tlabelTooltip: 'How long to wait after ICD is ready before trying to refresh buff with strike (0-10 seconds range).',\n\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.sim.getShowExperimental() && !player.getRotation().autoRotation && player.getTalentTree() == 2 && player.getEquippedItem(ItemSlot.ItemSlotRanged)?._item.id == 47673,\n\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter, player.gearChangeEmitter]),\n});\n\nexport const DeathKnightRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecDeathknight, FrostRotationType>({\n\t\t\tfieldName: 'frostRotationType',\n\t\t\tlabel: 'Rotation Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: FrostRotationType.SingleTarget },\n\t\t\t\t{ name: 'Custom', value: FrostRotationType.Custom },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecDeathknight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t\tshowWhen: (player: Player<Spec.SpecDeathknight>) => player.getTalents().howlingBlast && !player.getRotation().autoRotation,\n\t\t}),\n\t\tPresence,\n\t\tUseAutoRotation,\n\t\tBloodTapGhoulFrenzy,\n\t\tUseGargoyle,\n\t\tUseEmpowerRuneWeapon,\n\t\tUseDancingRuneWeapon,\n\t\t//NewDrwInput,\n\t\tHoldErwArmy,\n\t\tBloodTapInput,\n\t\tBloodSpenderInput,\n\t\tArmyOfTheDeadInput,\n\t\t//BloodOpenerInput,\n\t\tDrwDiseasesInput,\n\t\tFirstDiseaseInput,\n\t\tStartingPresenceInput,\n\t\tGargoylePresence,\n\t\tBloodlustPresence,\n\t\tFightPresence,\n\t\tBloodRuneFillerInput,\n\t\tUseDeathAndDecay,\n\t\tUseAMSInput,\n\t\tAvgAMSSuccessRateInput,\n\t\tAvgAMSHitInput,\n\t\tDesyncRotation,\n\t\tFrostCustomRotation,\n\t\tPreNerfedGargoyleInput,\n\t\tVirulenceRefreshTime,\n\t],\n};\n","import {\n\tConsumes,\n\tCustomRotation,\n\tCustomSpell,\n\tExplosive,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tPetFood,\n\tPotions,\n\tUnitReference,\n\tSpec\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tDeathknight_Options as DeathKnightOptions,\n\tDeathknight_Rotation as DeathKnightRotation,\n\tDeathknight_Rotation_ArmyOfTheDead,\n\tDeathknight_Rotation_BloodRuneFiller,\n\tDeathknight_Rotation_CustomSpellOption as CustomSpellOption,\n\tDeathknight_Rotation_FrostRotationType,\n\tDeathknight_Rotation_Presence,\n\tDeathknightMajorGlyph,\n\tDeathknightMinorGlyph,\n\tDeathknight_Rotation_DrwDiseases,\n\tDeathknight_Rotation_BloodSpell,\n} from '../core/proto/deathknight.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport P1BloodGear from './gear_sets/p1_blood.gear.json';\nexport const P1_BLOOD_PRESET = PresetUtils.makePresetGear('P1 Blood', P1BloodGear, { talentTree: 0 });\nimport P2BloodGear from './gear_sets/p2_blood.gear.json';\nexport const P2_BLOOD_PRESET = PresetUtils.makePresetGear('P2 Blood', P2BloodGear, { talentTree: 0 });\nimport P3BloodGear from './gear_sets/p3_blood.gear.json';\nexport const P3_BLOOD_PRESET = PresetUtils.makePresetGear('P3 Blood', P3BloodGear, { talentTree: 0 });\nimport P4BloodGear from './gear_sets/p4_blood.gear.json';\nexport const P4_BLOOD_PRESET = PresetUtils.makePresetGear('P4 Blood', P4BloodGear, { talentTree: 0 });\nimport PreraidFrostGear from './gear_sets/preraid_frost.gear.json';\nexport const PRERAID_FROST_PRESET = PresetUtils.makePresetGear('Pre-Raid Frost', PreraidFrostGear, { talentTree: 1 });\nimport P1FrostGear from './gear_sets/p1_frost.gear.json';\nexport const P1_FROST_PRESET = PresetUtils.makePresetGear('P1 Frost', P1FrostGear, { talentTree: 1 });\nimport P2FrostGear from './gear_sets/p2_frost.gear.json';\nexport const P2_FROST_PRESET = PresetUtils.makePresetGear('P2 Frost', P2FrostGear, { talentTree: 1 });\nimport P3FrostGear from './gear_sets/p3_frost.gear.json';\nexport const P3_FROST_PRESET = PresetUtils.makePresetGear('P3 Frost', P3FrostGear, { talentTree: 1 });\nimport P4FrostGear from './gear_sets/p4_frost.gear.json';\nexport const P4_FROST_PRESET = PresetUtils.makePresetGear('P4 Frost', P4FrostGear, { talentTree: 1 });\nimport P1FrostSubUhGear from './gear_sets/p1_frost_subUh.gear.json';\nexport const P1_FROSTSUBUNH_PRESET = PresetUtils.makePresetGear('P1 Frost Sub Unh', P1FrostSubUhGear, { talentTree: 1 });\nimport PreraidUh2hGear from './gear_sets/preraid_uh_2h.gear.json';\nexport const PRERAID_UNHOLY_2H_PRESET = PresetUtils.makePresetGear('Pre-Raid 2H Unholy', PreraidUh2hGear, { talentTree: 2 });\nimport P1Uh2hGear from './gear_sets/p1_uh_2h.gear.json';\nexport const P1_UNHOLY_2H_PRESET = PresetUtils.makePresetGear('P1 2H Unholy', P1Uh2hGear, { talentTree: 2 });\nimport P4Uh2hGear from './gear_sets/p4_uh_2h.gear.json';\nexport const P4_UNHOLY_2H_PRESET = PresetUtils.makePresetGear('P4 2H Unholy', P4Uh2hGear, { talentTree: 2 });\nimport PreraidUhDwGear from './gear_sets/preraid_uh_dw.gear.json';\nexport const PRERAID_UNHOLY_DW_PRESET = PresetUtils.makePresetGear('Pre-Raid DW Unholy', PreraidUhDwGear, { talentTree: 2 });\nimport P1UhDwGear from './gear_sets/p1_uh_dw.gear.json';\nexport const P1_UNHOLY_DW_PRESET = PresetUtils.makePresetGear('P1 DW Unholy', P1UhDwGear, { talentTree: 2 });\nimport P2UhDwGear from './gear_sets/p2_uh_dw.gear.json';\nexport const P2_UNHOLY_DW_PRESET = PresetUtils.makePresetGear('P2 DW Unholy', P2UhDwGear, { talentTree: 2 });\nimport P3UhDwGear from './gear_sets/p3_uh_dw.gear.json';\nexport const P3_UNHOLY_DW_PRESET = PresetUtils.makePresetGear('P3 DW Unholy', P3UhDwGear, { talentTree: 2 });\nimport P4UhDwGear from './gear_sets/p4_uh_dw.gear.json';\nexport const P4_UNHOLY_DW_PRESET = PresetUtils.makePresetGear('P4 DW Unholy', P4UhDwGear, { talentTree: 2 });\n\nexport const DefaultUnholyRotation = DeathKnightRotation.create({\n\tuseDeathAndDecay: true,\n\tbtGhoulFrenzy: true,\n\trefreshHornOfWinter: false,\n\tuseGargoyle: true,\n\tuseEmpowerRuneWeapon: true,\n\tholdErwArmy: false,\n\tpreNerfedGargoyle: false,\n\tarmyOfTheDead: Deathknight_Rotation_ArmyOfTheDead.AsMajorCd,\n\tstartingPresence: Deathknight_Rotation_Presence.Unholy,\n\tblPresence: Deathknight_Rotation_Presence.Blood,\n\tpresence: Deathknight_Rotation_Presence.Blood,\n\tgargoylePresence: Deathknight_Rotation_Presence.Unholy,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodBoil,\n\tuseAms: false,\n\tdrwDiseases: Deathknight_Rotation_DrwDiseases.Pestilence,\n\tbloodSpender: Deathknight_Rotation_BloodSpell.HS,\n\tuseDancingRuneWeapon: true\n});\n\nexport const DefaultFrostRotation = DeathKnightRotation.create({\n\tuseDeathAndDecay: false,\n\tbtGhoulFrenzy: false,\n\trefreshHornOfWinter: false,\n\tuseEmpowerRuneWeapon: true,\n\tpreNerfedGargoyle: false,\n\tstartingPresence: Deathknight_Rotation_Presence.Blood,\n\tpresence: Deathknight_Rotation_Presence.Blood,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodBoil,\n\tuseAms: false,\n\tavgAmsSuccessRate: 1.0,\n\tavgAmsHit: 10000.0,\n\tdrwDiseases: Deathknight_Rotation_DrwDiseases.Pestilence,\n  \tfrostRotationType: Deathknight_Rotation_FrostRotationType.SingleTarget,\n\tarmyOfTheDead: Deathknight_Rotation_ArmyOfTheDead.PreCast,\n  \tfrostCustomRotation: CustomRotation.create({\n\t\tspells: [\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomDeathAndDecay }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomIcyTouch }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomPlagueStrike }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomPestilence }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomHowlingBlastRime }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomHowlingBlast }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomBloodBoil }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomObliterate }),\n\t\t\tCustomSpell.create({ spell: CustomSpellOption.CustomFrostStrike }),\n\t\t],\n\t}),\n});\n\nexport const DefaultBloodRotation = DeathKnightRotation.create({\n\trefreshHornOfWinter: false,\n\tuseEmpowerRuneWeapon: true,\n\tpreNerfedGargoyle: false,\n\tstartingPresence: Deathknight_Rotation_Presence.Blood,\n\tbloodRuneFiller: Deathknight_Rotation_BloodRuneFiller.BloodStrike,\n\tarmyOfTheDead: Deathknight_Rotation_ArmyOfTheDead.PreCast,\n\tholdErwArmy: false,\n\tuseAms: false,\n\tdrwDiseases: Deathknight_Rotation_DrwDiseases.Pestilence,\n\tbloodSpender: Deathknight_Rotation_BloodSpell.HS,\n\tuseDancingRuneWeapon: true,\n});\n\nexport const BLOOD_ROTATION_PRESET_LEGACY_DEFAULT = PresetUtils.makePresetLegacyRotation('Blood Legacy', Spec.SpecDeathknight, DefaultBloodRotation, { talentTree: 0 });\nexport const FROST_ROTATION_PRESET_LEGACY_DEFAULT = PresetUtils.makePresetLegacyRotation('Frost Legacy', Spec.SpecDeathknight, DefaultFrostRotation, { talentTree: 1 });\nexport const UNHOLY_DW_ROTATION_PRESET_LEGACY_DEFAULT = PresetUtils.makePresetLegacyRotation('Unholy DW Legacy', Spec.SpecDeathknight, DefaultUnholyRotation, { talentTree: 2 });\n\nimport BloodDPSApl from './apls/blood_dps.apl.json';\nexport const BLOOD_DPS_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Blood DPS', BloodDPSApl, { talentTree: 0 });\nimport BloodPestiAoeApl from './apls/blood_pesti_aoe.apl.json';\nexport const BLOOD_PESTI_AOE_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Blood Pesti AOE', BloodPestiAoeApl, { talentTree: 0 });\nimport FrostBlPestiApl from './apls/frost_bl_pesti.apl.json';\nexport const FROST_BL_PESTI_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Frost BL Pesti', FrostBlPestiApl, { talentTree: 1 });\nimport FrostUhPestiApl from './apls/frost_uh_pesti.apl.json';\nexport const FROST_UH_PESTI_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Frost UH Pesti', FrostUhPestiApl, { talentTree: 1 });\nimport UhDwSsApl from './apls/unholy_dw_ss.apl.json';\nexport const UNHOLY_DW_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Unholy DW SS', UhDwSsApl, { talentTree: 2 });\nimport Uh2hSsApl from './apls/uh_2h_ss.apl.json';\nexport const UNHOLY_2H_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Unholy 2H SS', Uh2hSsApl, { talentTree: 2 });\nimport UhDndAoeApl from './apls/uh_dnd_aoe.apl.json';\nexport const UNHOLY_DND_AOE_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Unholy DND AOE', UhDndAoeApl, { talentTree: 2 });\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wotlk.wowhead.com/talent-calc and copy the numbers in the url.\nexport const FrostTalents = {\n\tname: 'Frost BL',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '23050005-32005350352203012300033101351',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfObliterate,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfFrostStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const FrostUnholyTalents = {\n\tname: 'Frost UH',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '01-32002350342203012300033101351-230200305003',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfObliterate,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfFrostStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const UnholyDualWieldTalents = {\n\tname: 'Unholy DW',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320043500002-2300303050032152000150013133051',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfIcyTouch,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDeathAndDecay,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const UnholyDualWieldSSTalents = {\n\tname: 'Unholy DW SS',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320033500002-2301303050032151000150013133151',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfIcyTouch,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDeathAndDecay,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const Unholy2HTalents = {\n\tname: 'Unholy 2H',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320050500002-2302003350032052000150013133151',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfIcyTouch,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDarkDeath,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const UnholyAoeTalents = {\n\tname: 'Unholy AOE',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-320050500002-2302303050032052000150013133151',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfTheGhoul,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfIcyTouch,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDeathAndDecay,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const BloodTalents = {\n\tname: 'Blood DPS',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '2305120530003303231023001351--2302003050032',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DeathknightMajorGlyph.GlyphOfDancingRuneWeapon,\n\t\t\tmajor2: DeathknightMajorGlyph.GlyphOfDeathStrike,\n\t\t\tmajor3: DeathknightMajorGlyph.GlyphOfDisease,\n\t\t\tminor1: DeathknightMinorGlyph.GlyphOfHornOfWinter,\n\t\t\tminor2: DeathknightMinorGlyph.GlyphOfPestilence,\n\t\t\tminor3: DeathknightMinorGlyph.GlyphOfRaiseDead,\n\t\t}),\n\t}),\n};\n\nexport const DefaultUnholyOptions = DeathKnightOptions.create({\n\tdrwPestiApply: true,\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastGhoulFrenzy: false,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: UnitReference.create(),\n\tdiseaseDowntime: 2,\n});\n\nexport const DefaultFrostOptions = DeathKnightOptions.create({\n\tdrwPestiApply: true,\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: UnitReference.create(),\n\tdiseaseDowntime: 0,\n});\n\nexport const DefaultBloodOptions = DeathKnightOptions.create({\n\tdrwPestiApply: true,\n\tstartingRunicPower: 0,\n\tpetUptime: 1,\n\tprecastHornOfWinter: true,\n\tunholyFrenzyTarget: UnitReference.create(),\n\tdiseaseDowntime: 0,\n});\n\nexport const OtherDefaults = {\n};\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodDragonfinFilet,\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tpetFood: PetFood.PetFoodSpicedMammothTreats,\n\tprepopPotion: Potions.PotionOfSpeed,\n\tthermalSapper: true,\n\tfillerExplosive: Explosive.ExplosiveSaroniteBomb,\n});\n","import {\n\tClass,\n\tDebuffs,\n\tFaction,\n\tHandType,\n\tIndividualBuffs,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat,\n\tTristateEffect,\n} from '../core/proto/common.js';\nimport { APLRotation } from '../core/proto/apl.js';\nimport { Player } from '../core/player.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\n\nimport * as DeathKnightInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecDeathknight, {\n\tcssClass: 'deathknight-sim-ui',\n\tcssScheme: 'death-knight',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStrength,\n\t\tStat.StatArmor,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatExpertise,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatArmor,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t],\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P2_UNHOLY_DW_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatStrength]: 3.22,\n\t\t\t[Stat.StatAgility]: 0.62,\n\t\t\t[Stat.StatArmor]: 0.01,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatExpertise]: 1.13,\n\t\t\t[Stat.StatMeleeHaste]: 1.85,\n\t\t\t[Stat.StatMeleeHit]: 1.92,\n\t\t\t[Stat.StatMeleeCrit]: 0.76,\n\t\t\t[Stat.StatArmorPenetration]: 0.77,\n\t\t\t[Stat.StatSpellHit]: 0.80,\n\t\t\t[Stat.StatSpellCrit]: 0.34,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 3.10,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 1.79,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\trotation: Presets.DefaultUnholyRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.UnholyDualWieldTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultUnholyOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tswiftRetribution: true,\n\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\t\t\ticyTalons: true,\n\t\t\tabominationsMight: true,\n\t\t\tleaderOfThePack: TristateEffect.TristateEffectRegular,\n\t\t\tsanctifiedRetribution: true,\n\t\t\tbloodlust: true,\n\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\tstoneskinTotem: TristateEffect.TristateEffectImproved,\n\t\t\tmoonkinAura: TristateEffect.TristateEffectRegular,\n\t\t\twrathOfAirTotem: true,\n\t\t\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t\theroicPresence: false,\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tbloodFrenzy: true,\n\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\tsunderArmor: true,\n\t\t\tebonPlaguebringer: true,\n\t\t\tmangle: true,\n\t\t\theartOfTheCrusader: true,\n\t\t\tshadowMastery: true,\n\t\t}),\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecDeathknight>): APLRotation => {\n\t\tconst talentTree = player.getTalentTree();\n\t\tconst numTargets = player.sim.encounter.targets.length;\n\t\tswitch (talentTree) {\n\t\t\tcase 0: \n\t\t\t\tif (player.getSpecOptions().drwPestiApply || numTargets > 1) {\n\t\t\t\t\tif (numTargets > 5) {\n\t\t\t\t\t\treturn Presets.BLOOD_PESTI_AOE_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Presets.BLOOD_DPS_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn Presets.BLOOD_DPS_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t\t}\n\t\t\tcase 1: \n\t\t\t\tconst talentPoints = player.getTalentTreePoints()\n\t\t\t\t// TODO: Add Frost AOE rotation\n\t\t\t\tif (talentPoints[0] > talentPoints[2]) {\n\t\t\t\t\treturn Presets.FROST_BL_PESTI_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t\t} else {\n\t\t\t\t\treturn Presets.FROST_UH_PESTI_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t\t}\n\t\t\tdefault: \n\t\t\t\tif (numTargets > 1) {\n\t\t\t\t\treturn Presets.UNHOLY_DND_AOE_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t\t} else {\n\t\t\t\t\tif (player.getEquippedItem(ItemSlot.ItemSlotMainHand)!.item.handType == HandType.HandTypeTwoHand) {\n\t\t\t\t\t\treturn Presets.UNHOLY_2H_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Presets.UNHOLY_DW_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: DeathKnightInputs.DeathKnightRotationConfig,\n\tpetConsumeInputs: [\n\t\tIconInputs.SpicedMammothTreats,\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tIconInputs.SpellDamageDebuff,\n\t\tIconInputs.StaminaBuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t\tIconInputs.AttackPowerDebuff,\n\t\tIconInputs.DamageReductionPercentBuff,\n\t\tIconInputs.MeleeAttackSpeedDebuff,\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tDeathKnightInputs.DiseaseDowntime,\n\t\t\tDeathKnightInputs.DrwPestiApply,\n\t\t\tDeathKnightInputs.SelfUnholyFrenzy,\n\t\t\tDeathKnightInputs.StartingRunicPower,\n\t\t\tDeathKnightInputs.PetUptime,\n\t\t\tDeathKnightInputs.UseAMSInput,\n\t\t\tDeathKnightInputs.AvgAMSSuccessRateInput,\n\t\t\tDeathKnightInputs.AvgAMSHitInput,\n\n\t\t\tDeathKnightInputs.PrecastGhoulFrenzy,\n\t\t\tDeathKnightInputs.PrecastHornOfWinter,\n\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\titemSwapSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.BloodTalents,\n\t\t\tPresets.FrostTalents,\n\t\t\tPresets.FrostUnholyTalents,\n\t\t\tPresets.UnholyDualWieldTalents,\n\t\t\tPresets.UnholyDualWieldSSTalents,\n\t\t\tPresets.Unholy2HTalents,\n\t\t\tPresets.UnholyAoeTalents,\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.BLOOD_ROTATION_PRESET_LEGACY_DEFAULT,\n\t\t\tPresets.FROST_ROTATION_PRESET_LEGACY_DEFAULT,\n\t\t\tPresets.UNHOLY_DW_ROTATION_PRESET_LEGACY_DEFAULT,\n\t\t\tPresets.BLOOD_DPS_ROTATION_PRESET_DEFAULT,\n\t\t\tPresets.BLOOD_PESTI_AOE_ROTATION_PRESET_DEFAULT,\n\t\t\tPresets.FROST_BL_PESTI_ROTATION_PRESET_DEFAULT,\n\t\t\tPresets.FROST_UH_PESTI_ROTATION_PRESET_DEFAULT,\n\t\t\tPresets.UNHOLY_DW_ROTATION_PRESET_DEFAULT,\n\t\t\tPresets.UNHOLY_2H_ROTATION_PRESET_DEFAULT,\n\t\t\tPresets.UNHOLY_DND_AOE_ROTATION_PRESET_DEFAULT,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.P1_BLOOD_PRESET,\n\t\t\tPresets.P2_BLOOD_PRESET,\n\t\t\tPresets.P3_BLOOD_PRESET,\n\t\t\tPresets.P4_BLOOD_PRESET,\n\t\t\tPresets.P1_FROST_PRESET,\n\t\t\tPresets.P2_FROST_PRESET,\n\t\t\tPresets.P3_FROST_PRESET,\n\t\t\tPresets.P4_FROST_PRESET,\n\t\t\tPresets.P1_UNHOLY_DW_PRESET,\n\t\t\tPresets.P2_UNHOLY_DW_PRESET,\n\t\t\tPresets.P3_UNHOLY_DW_PRESET,\n\t\t\tPresets.P4_UNHOLY_DW_PRESET,\n\t\t\tPresets.P4_UNHOLY_2H_PRESET,\n\t\t\t// Not needed anymore just filling ui Space\n\t\t\t// Disabled on purpose\n\t\t\t//Presets.P1_FROSTSUBUNH_PRESET,\n\t\t\t//Presets.P1_FROST_PRE_BIS_PRESET,\n\t\t\t//Presets.PRERAID_UNHOLY_DW_PRESET,\n\t\t\t//Presets.PRERAID_UNHOLY_2H_PRESET,\n\t\t\t//Presets.P1_UNHOLY_2H_PRESET,\n\t\t],\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecDeathknight,\n\t\t\ttooltip: 'Frost Death Knight',\n\t\t\tdefaultName: 'Frost',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 1),\n\n\t\t\ttalents: Presets.FrostTalents.data,\n\t\t\tspecOptions: Presets.DefaultFrostOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_FROST_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_FROST_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_FROST_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_FROST_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_FROST_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_FROST_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_FROST_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_FROST_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecDeathknight,\n\t\t\ttooltip: 'Dual-Wield Unholy DK',\n\t\t\tdefaultName: 'Unholy',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDeathknight, 2),\n\n\t\t\ttalents: Presets.UnholyDualWieldTalents.data,\n\t\t\tspecOptions: Presets.DefaultUnholyOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_UNHOLY_DW_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_UNHOLY_DW_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_UNHOLY_DW_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_UNHOLY_DW_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_UNHOLY_DW_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_UNHOLY_DW_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_UNHOLY_DW_PRESET.gear,\n\t\t\t\t\t4: Presets.P4_UNHOLY_DW_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t},\n\t],\n});\n\nexport class DeathknightSimUI extends IndividualSimUI<Spec.SpecDeathknight> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecDeathknight>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["SelfUnholyFrenzy","InputHelpers.makeSpecOptionsBooleanInput","fieldName","label","labelTooltip","extraCssClasses","getValue","player","getSpecOptions","unholyFrenzyTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setSpecOptions","showWhen","getTalents","hysteria","changeEmitter","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","StartingRunicPower","InputHelpers.makeSpecOptionsNumberInput","PetUptime","percent","masterOfGhouls","PrecastGhoulFrenzy","summonGargoyle","ghoulFrenzy","specOptionsChangeEmitter","PrecastHornOfWinter","DrwPestiApply","getRotation","autoRotation","getTalentTree","getGlyphs","major1","DeathknightMajorGlyph","GlyphOfDisease","major2","major3","UseAMSInput","howlingBlast","AvgAMSSuccessRateInput","useAms","AvgAMSHitInput","InputHelpers.makeRotationNumberInput","UseDeathAndDecay","InputHelpers.makeRotationBooleanInput","scourgeStrike","epidemic","desyncRotation","sim","encounter","targets","length","targetsChangeEmitter","InputHelpers.makeRotationEnumInput","values","name","value","DeathAndDecayPrio","MaxRuneDowntime","MaxDndUptime","useDeathAndDecay","UseEmpowerRuneWeapon","frostRotationType","FrostRotationType","Custom","UseGargoyle","HoldErwArmy","useEmpowerRuneWeapon","armyOfTheDead","ArmyOfTheDead","AsMajorCd","BloodlustPresence","StartingPresence","Blood","Unholy","GargoylePresence","preNerfedGargoyle","BloodTapGhoulFrenzy","FirstDiseaseInput","FirstDisease","FrostFever","BloodPlague","ArmyOfTheDeadInput","DoNotUse","PreCast","StartingPresenceInput","FightPresence","BloodRuneFillerInput","BloodRuneFiller","BloodStrike","BloodBoil","PreNerfedGargoyleInput","getShowExperimental","BloodTapInput","BloodTap","GhoulFrenzy","IcyTouch","BloodStrikeBT","BloodBoilBT","UseAutoRotation","DesyncRotation","Presence","Frost","BloodSpenderInput","BloodSpell","HS","BB","BS","UseDancingRuneWeapon","dancingRuneWeapon","DrwDiseasesInput","DrwDiseases","DoNotApply","Normal","Pestilence","useDancingRuneWeapon","bloodOpener","BloodOpener","Standard","Experimental_1","FrostCustomRotation","InputHelpers.makeCustomRotationInput","numColumns","actionId","ActionId","fromSpellId","CustomSpellOption","CustomIcyTouch","CustomPlagueStrike","CustomPestilence","CustomObliterate","CustomHowlingBlast","CustomHowlingBlastRime","CustomBloodBoil","CustomBloodStrike","CustomDeathAndDecay","CustomHornOfWinter","CustomUnbreakableArmor","CustomBloodTap","CustomEmpoweredRuneWeapon","CustomFrostStrike","DiseaseDowntime","VirulenceRefreshTime","getEquippedItem","ItemSlot","ItemSlotRanged","_item","id","gearChangeEmitter","DeathKnightRotationConfig","inputs","SingleTarget","P1_BLOOD_PRESET","PresetUtils.makePresetGear","talentTree","P2_BLOOD_PRESET","P2BloodGear","P3_BLOOD_PRESET","P3BloodGear","P4_BLOOD_PRESET","P4BloodGear","PreraidFrostGear","P1_FROST_PRESET","P1FrostGear","P2_FROST_PRESET","P2FrostGear","P3_FROST_PRESET","P3FrostGear","P4_FROST_PRESET","P4FrostGear","P1FrostSubUhGear","PreraidUh2hGear","P1Uh2hGear","P4_UNHOLY_2H_PRESET","P4Uh2hGear","PreraidUhDwGear","P1_UNHOLY_DW_PRESET","P1UhDwGear","P2_UNHOLY_DW_PRESET","P2UhDwGear","P3_UNHOLY_DW_PRESET","P3UhDwGear","P4_UNHOLY_DW_PRESET","P4UhDwGear","DefaultUnholyRotation","DeathKnightRotation","btGhoulFrenzy","refreshHornOfWinter","useGargoyle","holdErwArmy","Deathknight_Rotation_ArmyOfTheDead","startingPresence","Deathknight_Rotation_Presence","blPresence","presence","gargoylePresence","bloodRuneFiller","Deathknight_Rotation_BloodRuneFiller","drwDiseases","Deathknight_Rotation_DrwDiseases","bloodSpender","Deathknight_Rotation_BloodSpell","DefaultFrostRotation","avgAmsSuccessRate","avgAmsHit","Deathknight_Rotation_FrostRotationType","frostCustomRotation","CustomRotation","spells","CustomSpell","spell","DefaultBloodRotation","BLOOD_ROTATION_PRESET_LEGACY_DEFAULT","PresetUtils.makePresetLegacyRotation","Spec","SpecDeathknight","FROST_ROTATION_PRESET_LEGACY_DEFAULT","UNHOLY_DW_ROTATION_PRESET_LEGACY_DEFAULT","BLOOD_DPS_ROTATION_PRESET_DEFAULT","PresetUtils.makePresetAPLRotation","BloodDPSApl","BLOOD_PESTI_AOE_ROTATION_PRESET_DEFAULT","BloodPestiAoeApl","FROST_BL_PESTI_ROTATION_PRESET_DEFAULT","FrostBlPestiApl","FROST_UH_PESTI_ROTATION_PRESET_DEFAULT","FrostUhPestiApl","UNHOLY_DW_ROTATION_PRESET_DEFAULT","UhDwSsApl","UNHOLY_2H_ROTATION_PRESET_DEFAULT","Uh2hSsApl","UNHOLY_DND_AOE_ROTATION_PRESET_DEFAULT","UhDndAoeApl","FrostTalents","data","SavedTalents","talentsString","glyphs","Glyphs","GlyphOfObliterate","GlyphOfFrostStrike","minor1","DeathknightMinorGlyph","GlyphOfHornOfWinter","minor2","GlyphOfPestilence","minor3","GlyphOfRaiseDead","FrostUnholyTalents","UnholyDualWieldTalents","GlyphOfTheGhoul","GlyphOfIcyTouch","GlyphOfDeathAndDecay","UnholyDualWieldSSTalents","Unholy2HTalents","GlyphOfDarkDeath","UnholyAoeTalents","BloodTalents","GlyphOfDancingRuneWeapon","GlyphOfDeathStrike","DefaultUnholyOptions","DeathKnightOptions","drwPestiApply","startingRunicPower","petUptime","precastGhoulFrenzy","precastHornOfWinter","diseaseDowntime","DefaultFrostOptions","OtherDefaults","DefaultConsumes","Consumes","flask","Flask","FlaskOfEndlessRage","food","Food","FoodDragonfinFilet","defaultPotion","Potions","PotionOfSpeed","petFood","PetFood","PetFoodSpicedMammothTreats","prepopPotion","thermalSapper","fillerExplosive","Explosive","ExplosiveSaroniteBomb","SPEC_CONFIG","registerSpecConfig","cssClass","cssScheme","knownIssues","epStats","Stat","StatStrength","StatArmor","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatSpellHit","StatSpellCrit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","defaults","gear","Presets.P2_UNHOLY_DW_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultUnholyRotation","talents","Presets.UnholyDualWieldTalents","specOptions","Presets.DefaultUnholyOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","swiftRetribution","strengthOfEarthTotem","icyTalons","abominationsMight","leaderOfThePack","TristateEffectRegular","sanctifiedRetribution","bloodlust","devotionAura","stoneskinTotem","moonkinAura","wrathOfAirTotem","powerWordFortitude","partyBuffs","PartyBuffs","heroicPresence","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","debuffs","Debuffs","bloodFrenzy","faerieFire","sunderArmor","ebonPlaguebringer","mangle","heartOfTheCrusader","shadowMastery","numTargets","Presets.BLOOD_PESTI_AOE_ROTATION_PRESET_DEFAULT","Presets.BLOOD_DPS_ROTATION_PRESET_DEFAULT","talentPoints","getTalentTreePoints","Presets.FROST_BL_PESTI_ROTATION_PRESET_DEFAULT","Presets.FROST_UH_PESTI_ROTATION_PRESET_DEFAULT","Presets.UNHOLY_DND_AOE_ROTATION_PRESET_DEFAULT","ItemSlotMainHand","item","handType","HandType","HandTypeTwoHand","Presets.UNHOLY_2H_ROTATION_PRESET_DEFAULT","Presets.UNHOLY_DW_ROTATION_PRESET_DEFAULT","playerIconInputs","rotationInputs","DeathKnightInputs.DeathKnightRotationConfig","petConsumeInputs","IconInputs.SpicedMammothTreats","includeBuffDebuffInputs","IconInputs.SpellDamageDebuff","IconInputs.StaminaBuff","excludeBuffDebuffInputs","IconInputs.AttackPowerDebuff","IconInputs.DamageReductionPercentBuff","IconInputs.MeleeAttackSpeedDebuff","otherInputs","DeathKnightInputs.DiseaseDowntime","DeathKnightInputs.DrwPestiApply","DeathKnightInputs.SelfUnholyFrenzy","DeathKnightInputs.StartingRunicPower","DeathKnightInputs.PetUptime","DeathKnightInputs.UseAMSInput","DeathKnightInputs.AvgAMSSuccessRateInput","DeathKnightInputs.AvgAMSHitInput","DeathKnightInputs.PrecastGhoulFrenzy","DeathKnightInputs.PrecastHornOfWinter","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","itemSwapSlots","ItemSlotOffHand","encounterPicker","showExecuteProportion","presets","Presets.BloodTalents","Presets.FrostTalents","Presets.FrostUnholyTalents","Presets.UnholyDualWieldSSTalents","Presets.Unholy2HTalents","Presets.UnholyAoeTalents","rotations","Presets.BLOOD_ROTATION_PRESET_LEGACY_DEFAULT","Presets.FROST_ROTATION_PRESET_LEGACY_DEFAULT","Presets.UNHOLY_DW_ROTATION_PRESET_LEGACY_DEFAULT","Presets.P1_BLOOD_PRESET","Presets.P2_BLOOD_PRESET","Presets.P3_BLOOD_PRESET","Presets.P4_BLOOD_PRESET","Presets.P1_FROST_PRESET","Presets.P2_FROST_PRESET","Presets.P3_FROST_PRESET","Presets.P4_FROST_PRESET","Presets.P1_UNHOLY_DW_PRESET","Presets.P3_UNHOLY_DW_PRESET","Presets.P4_UNHOLY_DW_PRESET","Presets.P4_UNHOLY_2H_PRESET","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassDeathknight","Presets.DefaultFrostOptions","defaultFactionRaces","Faction","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceTroll","defaultGear","otherDefaults","Presets.OtherDefaults","DeathknightSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}