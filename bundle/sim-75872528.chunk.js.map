{"version":3,"file":"sim-75872528.chunk.js","sources":["../../../ui/balance_druid/inputs.ts","../../../ui/balance_druid/presets.ts","../../../ui/balance_druid/sim.ts"],"sourcesContent":["import { UnitReference, UnitReference_Type as UnitType } from '../core/proto/common.js';\nimport { Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tBalanceDruid_Options as DruidOptions,\n\tBalanceDruid_Rotation_Type as RotationType,\n\tBalanceDruid_Rotation_MfUsage as MfUsage,\n\tBalanceDruid_Rotation_MfExtension as MfExtension,\n\tBalanceDruid_Rotation_IsUsage as IsUsage,\n\tBalanceDruid_Rotation_WrathUsage as WrathUsage,\n\tBalanceDruid_Rotation_EclipsePrio as EclipsePrio,\n} from '../core/proto/druid.js';\n\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SelfInnervate = InputHelpers.makeSpecOptionsBooleanIconInput<Spec.SpecBalanceDruid>({\n\tfieldName: 'innervateTarget',\n\tid: ActionId.fromSpellId(29166),\n\textraCssClasses: [\n\t\t'within-raid-sim-hide',\n\t],\n\tgetValue: (player: Player<Spec.SpecBalanceDruid>) => player.getSpecOptions().innervateTarget?.type == UnitType.Player,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecBalanceDruid>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tnewOptions.innervateTarget = UnitReference.create({\n\t\t\ttype: newValue ? UnitType.Player : UnitType.Unknown,\n\t\t\tindex: 0,\n\t\t});\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n\nexport const OkfUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecBalanceDruid>({\n\tfieldName: 'okfUptime',\n\tlabel: 'Owlkin Frenzy Uptime (%)',\n\tlabelTooltip: 'Percentage of fight uptime for Owlkin Frenzy',\n\tpercent: true,\n});\n\nexport const BalanceDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, RotationType>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tlabelTooltip: 'Set to \\'Manual\\', to manage eclipses, spells, CDs and DoTs usage.',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Default', value: RotationType.Default,\n\t\t\t\t\ttooltip: 'The default rotation.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Manual', value: RotationType.Manual,\n\t\t\t\t\ttooltip: 'Allows custom selection of which spells to use, dot management and CD usage.',\n\t\t\t\t},\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, EclipsePrio>({\n\t\t\tfieldName: 'eclipsePrio',\n\t\t\tlabel: 'Eclipse priority',\n\t\t\tlabelTooltip: 'Defines which eclipse will get prioritized in the rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Lunar', value: EclipsePrio.Lunar },\n\t\t\t\t{ name: 'Solar', value: EclipsePrio.Solar },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, MfUsage>({\n\t\t\tfieldName: 'mfUsage',\n\t\t\tlabel: 'Moonfire Usage',\n\t\t\tlabelTooltip: 'Defines how Moonfire will be used in the rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Unused', value: MfUsage.NoMf },\n\t\t\t\t{ name: 'Before lunar', value: MfUsage.BeforeLunar },\n\t\t\t\t{ name: 'Maximize', value: MfUsage.MaximizeMf },\n\t\t\t\t{ name: 'Multidot', value: MfUsage.MultidotMf },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, MfExtension>({\n\t\t\tfieldName: 'mfExtension',\n\t\t\tlabel: 'Moonfire Extension',\n\t\t\tlabelTooltip: 'When should the rotation try to extend Moonfire on the main target.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Extend always', value: MfExtension.ExtendAlways },\n\t\t\t\t{ name: 'Extend outside solar', value: MfExtension.ExtendOutsideSolar },\n\t\t\t\t{ name: 'Do not extend', value: MfExtension.DontExtend },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, IsUsage>({\n\t\t\tfieldName: 'isUsage',\n\t\t\tlabel: 'Insect Swarm Usage',\n\t\t\tlabelTooltip: 'Defines how Insect Swarm will be used in the rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Unused', value: IsUsage.NoIs },\n\t\t\t\t{ name: 'Before solar', value: IsUsage.BeforeSolar },\n\t\t\t\t{ name: 'Optimize', value: IsUsage.OptimizeIs },\n\t\t\t\t{ name: 'Multidot', value: IsUsage.MultidotIs },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBalanceDruid, WrathUsage>({\n\t\t\tfieldName: 'wrathUsage',\n\t\t\tlabel: 'Wrath usage',\n\t\t\tlabelTooltip: 'Defines how Wrath will be used in the rotation.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Unused', value: WrathUsage.NoWrath },\n\t\t\t\t{ name: 'Fishing for Lunar', value: WrathUsage.FishingForLunar },\n\t\t\t\t{ name: 'Regular', value: WrathUsage.RegularWrath },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useStarfire',\n\t\t\tlabel: 'Use Starfire',\n\t\t\tlabelTooltip: 'Should the rotation use Starfire.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useSmartCooldowns',\n\t\t\tlabel: 'Smart Cooldowns usage',\n\t\t\tlabelTooltip: 'The rotation will use cooldowns during eclipses, avoiding Haste CDs in solar and Crit CDs in lunar',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'snapshotMf',\n\t\t\tlabel: 'Snapshot Moonfire',\n\t\t\tlabelTooltip: 'The rotation will try to snapshot Moonfire with SP procs',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'eclipseShuffling',\n\t\t\tlabel: 'Eclipse Shuffling',\n\t\t\tlabelTooltip: 'Should the rotation alternate Starfire and Wrath when both eclipses are available.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useTyphoon',\n\t\t\tlabel: 'Use Typhoon',\n\t\t\tlabelTooltip: 'Should the rotation use Typhoon.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useHurricane',\n\t\t\tlabel: 'Use Hurricane',\n\t\t\tlabelTooltip: 'Should the rotation use Hurricane.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'useBattleRes',\n\t\t\tlabel: 'Use Battle Res',\n\t\t\tlabelTooltip: 'Cast Battle Res on an ally sometime during the encounter.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecBalanceDruid>({\n\t\t\tfieldName: 'playerLatency',\n\t\t\tlabel: 'Player latency',\n\t\t\tlabelTooltip: 'Time before the player reacts to an eclipse proc, in milliseconds.',\n\t\t\tshowWhen: (player: Player<Spec.SpecBalanceDruid>) => player.getRotation().type == RotationType.Manual,\n\t\t}),\n\t],\n};\n","import {\n\tConsumes,\n\tDebuffs,\n\tExplosive,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tPotions,\n\tRaidBuffs,\n\tUnitReference,\n\tTristateEffect,\n\tFaction,\n\tProfession,\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tBalanceDruid_Options as BalanceDruidOptions,\n\tBalanceDruid_Rotation as BalanceDruidRotation,\n\tBalanceDruid_Rotation_IsUsage,\n\tBalanceDruid_Rotation_MfUsage,\n\tBalanceDruid_Rotation_Type as RotationType,\n\tBalanceDruid_Rotation_WrathUsage,\n\tDruidMajorGlyph,\n\tDruidMinorGlyph,\n} from '../core/proto/druid.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nimport PreraidGear from './gear_sets/preraid.gear.json';\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Pre-raid Preset', PreraidGear);\nimport P1Gear from './gear_sets/p1.gear.json';\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nimport P2Gear from './gear_sets/p2.gear.json';\nexport const P2_PRESET = PresetUtils.makePresetGear('P2 Preset', P2Gear);\nimport P3AllianceGear from './gear_sets/p3_alliance.gear.json';\nexport const P3_PRESET_ALLI = PresetUtils.makePresetGear('P3 Preset [A]', P3AllianceGear, { faction: Faction.Alliance });\nimport P3HordeGear from './gear_sets/p3_horde.gear.json';\nexport const P3_PRESET_HORDE = PresetUtils.makePresetGear('P3 Preset [H]', P3HordeGear, { faction: Faction.Horde });\nimport P4AllianceGear from './gear_sets/p4_alliance.gear.json';\nexport const P4_PRESET_ALLI = PresetUtils.makePresetGear('P4 Preset [A]', P4AllianceGear, { faction: Faction.Alliance });\nimport P4HordeGear from './gear_sets/p4_horde.gear.json';\nexport const P4_PRESET_HORDE = PresetUtils.makePresetGear('P4 Preset [H]', P4HordeGear, { faction: Faction.Horde });\n\nimport BasicP3AplJson from './apls/basic_p3.apl.json';\nexport const ROTATION_PRESET_P3_APL = PresetUtils.makePresetAPLRotation('P3', BasicP3AplJson);\nimport P4FocusAplJson from './apls/p4_focus_glyph.apl.json';\nexport const ROTATION_PRESET_P4_FOCUS_APL = PresetUtils.makePresetAPLRotation('P4 Focus Glyph', P4FocusAplJson);\nimport P4StarfireAplJson from './apls/p4_starfire_glyph.apl.json';\nexport const ROTATION_PRESET_P4_STARFIRE_APL = PresetUtils.makePresetAPLRotation('P4 Starfire Glyph', P4StarfireAplJson);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/wotlk/talent-calc and copy the numbers in the url.\nexport const Phase1Talents = {\n\tname: 'Phase 1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '5032003115331303213305311231--205003012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfFocus,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfInsectSwarm,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfStarfall,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfTheWild,\n\t\t}),\n\t}),\n};\n\nexport const Phase2Talents = {\n\tname: 'Phase 2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '5012203115331303213305311231--205003012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfStarfire,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfInsectSwarm,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfStarfall,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfTheWild,\n\t\t}),\n\t}),\n};\n\nexport const Phase3Talents = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '5102223115331303213305311031--205003012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfStarfire,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfMoonfire,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfStarfall,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfTheWild,\n\t\t}),\n\t}),\n};\n\nexport const Phase4Talents = {\n\tname: 'Phase 4',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '5102223115331303213305311031--205003012',\n\t\tglyphs: Glyphs.create({\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfFocus,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfInsectSwarm,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfStarfall,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfTheWild,\n\t\t}),\n\t}),\n};\n\nexport const DefaultRotation = BalanceDruidRotation.create({\n\ttype: RotationType.Default,\n\tmaintainFaerieFire: true,\n\tuseSmartCooldowns: true,\n\tmfUsage: BalanceDruid_Rotation_MfUsage.BeforeLunar,\n\tisUsage: BalanceDruid_Rotation_IsUsage.OptimizeIs,\n\twrathUsage: BalanceDruid_Rotation_WrathUsage.RegularWrath,\n\tuseStarfire: true,\n\tuseBattleRes: false,\n\tplayerLatency: 200,\n});\n\nexport const DefaultOptions = BalanceDruidOptions.create({\n\tinnervateTarget: UnitReference.create(),\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n\tprepopPotion: Potions.PotionOfWildMagic,\n\tfillerExplosive: Explosive.ExplosiveSaroniteBomb,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\tbloodlust: true,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\ticyTalons: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\tsanctifiedRetribution: true,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n\ttrueshotAura: true,\n\twrathOfAirTotem: true,\n\tdemonicPact: 500,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfKings: true,\n\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\tvampiricTouch: true,\n});\n\nexport const DefaultPartyBuffs = PartyBuffs.create({\n\theroicPresence: false,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tbloodFrenzy: true,\n\tebonPlaguebringer: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\theartOfTheCrusader: true,\n\tjudgementOfWisdom: true,\n\tshadowMastery: true,\n\tsunderArmor: true,\n\ttotemOfWrath: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 18,\n\tprofession1: Profession.Engineering,\n\tprofession2: Profession.Tailoring,\n\tnibelungAverageCasts: 11,\n};\n","import {\n\tClass,\n\tFaction,\n\tRace,\n\tSpec,\n\tStat,\n} from '../core/proto/common.js';\nimport {\n\tAPLRotation,\n} from '../core/proto/apl.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { Player } from '../core/player.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\n\nimport * as IconInputs from '../core/components/icon_inputs.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\n\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecBalanceDruid, {\n\tcssClass: 'balance-druid-sim-ui',\n\tcssScheme: 'druid',\n\t// List any known bugs / issues here, and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P3_PRESET_HORDE.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.43,\n\t\t\t[Stat.StatSpirit]: 0.34,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatSpellCrit]: 0.82,\n\t\t\t[Stat.StatSpellHaste]: 0.80,\n\t\t\t[Stat.StatMP5]: 0.00,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\trotation: Presets.DefaultRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.Phase3Talents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: Presets.DefaultPartyBuffs,\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t\tother: Presets.OtherDefaults,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tDruidInputs.SelfInnervate,\n\t],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: DruidInputs.BalanceDruidRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tIconInputs.MeleeHasteBuff,\n\t\tIconInputs.MeleeCritBuff,\n\t\tIconInputs.AttackPowerPercentBuff,\n\t\tIconInputs.AttackPowerBuff,\n\t\tIconInputs.MajorArmorDebuff,\n\t\tIconInputs.MinorArmorDebuff,\n\t\tIconInputs.PhysicalDamageDebuff,\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tDruidInputs.OkfUptime,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.ReactionTime,\n\t\t\tOtherInputs.DistanceFromTarget,\n\t\t\tOtherInputs.nibelungAverageCasts,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.Phase1Talents,\n\t\t\tPresets.Phase2Talents,\n\t\t\tPresets.Phase3Talents,\n\t\t\tPresets.Phase4Talents,\n\t\t],\n\t\trotations: [\n\t\t\tPresets.ROTATION_PRESET_P3_APL,\n\t\t\tPresets.ROTATION_PRESET_P4_FOCUS_APL,\n\t\t\tPresets.ROTATION_PRESET_P4_STARFIRE_APL,\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_PRESET,\n\t\t\tPresets.P1_PRESET,\n\t\t\tPresets.P2_PRESET,\n\t\t\tPresets.P3_PRESET_HORDE,\n\t\t\tPresets.P3_PRESET_ALLI,\n\t\t\tPresets.P4_PRESET_HORDE,\n\t\t\tPresets.P4_PRESET_ALLI,\n\t\t],\n\t},\n\n\tautoRotation: (_player: Player<Spec.SpecBalanceDruid>): APLRotation => {\n\t\treturn Presets.ROTATION_PRESET_P3_APL.rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecBalanceDruid,\n\t\t\ttooltip: specNames[Spec.SpecBalanceDruid],\n\t\t\tdefaultName: 'Balance',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDruid, 0),\n\n\t\t\ttalents: Presets.Phase2Talents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_ALLI.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_ALLI.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_HORDE.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_HORDE.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class BalanceDruidSimUI extends IndividualSimUI<Spec.SpecBalanceDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecBalanceDruid>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["SelfInnervate","InputHelpers.makeSpecOptionsBooleanIconInput","fieldName","id","ActionId","fromSpellId","extraCssClasses","getValue","player","getSpecOptions","innervateTarget","type","UnitType","Player","setValue","eventID","newValue","newOptions","UnitReference","create","Unknown","index","setSpecOptions","OkfUptime","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","percent","BalanceDruidRotationConfig","inputs","InputHelpers.makeRotationEnumInput","values","name","value","RotationType","Default","tooltip","Manual","EclipsePrio","Lunar","Solar","showWhen","getRotation","MfUsage","NoMf","BeforeLunar","MaximizeMf","MultidotMf","MfExtension","ExtendAlways","ExtendOutsideSolar","DontExtend","IsUsage","NoIs","BeforeSolar","OptimizeIs","MultidotIs","WrathUsage","NoWrath","FishingForLunar","RegularWrath","InputHelpers.makeRotationBooleanInput","InputHelpers.makeRotationNumberInput","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET","P2Gear","P3_PRESET_ALLI","P3AllianceGear","faction","Faction","Alliance","P3_PRESET_HORDE","P3HordeGear","Horde","P4_PRESET_ALLI","P4AllianceGear","P4_PRESET_HORDE","P4HordeGear","ROTATION_PRESET_P3_APL","PresetUtils.makePresetAPLRotation","BasicP3AplJson","ROTATION_PRESET_P4_FOCUS_APL","P4FocusAplJson","ROTATION_PRESET_P4_STARFIRE_APL","P4StarfireAplJson","Phase1Talents","data","SavedTalents","talentsString","glyphs","Glyphs","major1","DruidMajorGlyph","GlyphOfFocus","major2","GlyphOfInsectSwarm","major3","GlyphOfStarfall","minor1","DruidMinorGlyph","GlyphOfTyphoon","minor2","GlyphOfUnburdenedRebirth","minor3","GlyphOfTheWild","Phase2Talents","GlyphOfStarfire","Phase3Talents","GlyphOfMoonfire","Phase4Talents","DefaultRotation","BalanceDruidRotation","maintainFaerieFire","useSmartCooldowns","mfUsage","BalanceDruid_Rotation_MfUsage","isUsage","BalanceDruid_Rotation_IsUsage","wrathUsage","BalanceDruid_Rotation_WrathUsage","useStarfire","useBattleRes","playerLatency","DefaultOptions","BalanceDruidOptions","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","prepopPotion","PotionOfWildMagic","fillerExplosive","Explosive","ExplosiveSaroniteBomb","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","icyTalons","moonkinAura","leaderOfThePack","powerWordFortitude","sanctifiedRetribution","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","demonicPact","DefaultIndividualBuffs","IndividualBuffs","blessingOfKings","blessingOfMight","blessingOfWisdom","vampiricTouch","DefaultPartyBuffs","PartyBuffs","heroicPresence","DefaultDebuffs","Debuffs","bloodFrenzy","ebonPlaguebringer","faerieFire","heartOfTheCrusader","judgementOfWisdom","shadowMastery","sunderArmor","totemOfWrath","OtherDefaults","distanceFromTarget","profession1","Profession","Engineering","profession2","Tailoring","nibelungAverageCasts","SPEC_CONFIG","registerSpecConfig","Spec","SpecBalanceDruid","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.P3_PRESET_HORDE","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotation","Presets.DefaultRotation","talents","Presets.Phase3Talents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","Presets.DefaultPartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","DruidInputs.SelfInnervate","rotationInputs","DruidInputs.BalanceDruidRotationConfig","includeBuffDebuffInputs","IconInputs.MeleeHasteBuff","IconInputs.MeleeCritBuff","IconInputs.AttackPowerPercentBuff","IconInputs.AttackPowerBuff","IconInputs.MajorArmorDebuff","IconInputs.MinorArmorDebuff","IconInputs.PhysicalDamageDebuff","excludeBuffDebuffInputs","otherInputs","DruidInputs.OkfUptime","OtherInputs.TankAssignment","OtherInputs.ReactionTime","OtherInputs.DistanceFromTarget","OtherInputs.nibelungAverageCasts","encounterPicker","showExecuteProportion","presets","Presets.Phase1Talents","Presets.Phase2Talents","Presets.Phase4Talents","rotations","Presets.ROTATION_PRESET_P3_APL","Presets.ROTATION_PRESET_P4_FOCUS_APL","Presets.ROTATION_PRESET_P4_STARFIRE_APL","Presets.PRERAID_PRESET","Presets.P1_PRESET","Presets.P2_PRESET","Presets.P3_PRESET_ALLI","Presets.P4_PRESET_HORDE","Presets.P4_PRESET_ALLI","autoRotation","_player","raidSimPresets","spec","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassDruid","otherDefaults","defaultFactionRaces","Race","RaceUnknown","RaceNightElf","RaceTauren","defaultGear","BalanceDruidSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}